%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: FiguresHTML.dvi
%%CreationDate: Thu Aug  8 23:33:26 2019
%%BoundingBox: 122 82 577 737
%%DocumentFonts: CMMI12 CMSY10 CMR12
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Ppdf -E -p2 -l2 -o
%+ FiguresLabels/HTML_figs2.eps FiguresHTML.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2019.08.09:1133
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 616 2017-10-04 16:14:42Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.27, 2017/09/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BFCF3BD739E32E7FE909AEE068D50FAC33605FFF98C7D0115FB860178FD03DB9
7985B78E0AC21F2EA065FA841F5928FB85163B2E2D8F850DC7EE313912C45C28
2783F6762C67882EFEDDC7E7567F91C16B16FD8D5A1ABF35B5586307701B91AD
54984598F2AD46FEE3D68A2731BEAA754C8E730FE0E84952EF77930E4118F8D7
2F3AD7553D790FA71F25D11EAB33FF45E1B21F7333E36B945FBF1C7796E9D08D
7E6119989A5840C7CBB8AB46892A1DBB88A7202E5F356FEEBB7E1A4F11954EAC
68CFA2A652C9E5BF2BE246D357673B7063145B908B42A30CDF2584E767AEDC19
EDDCA0AF65946D9F9442CAD6810CE8AAF2EBEAD09F37600E34524D48D64B9B75
F9FEC075741CE4802E1A4BA214E19D0390A72F03CC11F37FFF731B55329C0FEB
A2F7B748602DC6196DFD26AE52D3209F6E49F755B02084BB68ACC24A72DD75E9
04E71EEA0BB9D5B4F4F1CB7B22A1EB40FEF1D28E129A2FC28DD3A90A9429CA03
557A9B9582FE673CF6E4340E46E062D65AA9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70EB02A
60651FC2E263002D3986B7B20CC2AA08330B9FC2E26765CD52266969A86EE30E
71E0B41B6C1C6DA423D3A7E1553D2FAF26EF40DC183099322D362E4965695C52
9FC3E5BD7ABD743CDCB717DB10372A722A39CE53FABB454EADE2179C4CBFC016
A8E893C28EF549CA1692C8D8ADFC471DCCDE266FB4E97A1F3035801F3F034D44
AE6ADA0192657E8078A1D27420093FEBA111333314658021B90DA4E7A8D4B829
F1795501020D5FF0AD25584C1D491A1FDD60F7230D5D725D21F531072155D5CA
12045C71F375116E93825D964FE24E272B239E8E12DB85368F11963CBB4E2B4B
EA559F6A1FED7DDAE902017290E4549337A9F6CC3109F1F858213AF70573323B
78B9F56D9A2D6E6BD0FB038E6B0AEB661D95D1669D49D7E93A21C76C8E0B29CA
73D10BB805BC9D2D488FB292E1D014B47ED472B3DD4819A2CB3E370EEE819BCD
8C722A1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI12
%!PS-AdobeFont-1.0: CMMI12 003.002
%%Title: CMMI12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI12 known{/CMMI12 findfont dup/UniqueID known{dup
/UniqueID get 5087386 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI12 def
/FontBBox {-31 -250 1026 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI12.) readonly def
/FullName (CMMI12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /lambda put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBFE3573BF464E2BE
882A715BE109B49A15C32F62CF5C10257E5EA12C24F72137EB63297C28625AC3
2274038691582D6D75FE8F895A0813982793297E49CC9B54053BA2ABD429156A
7FFCD7B19DAA44E2107720921B74185AE507AC33141819511A6AC20BC20FB541
0B5AAEC5743673E9E39C1976D5E6EB4E4D8E2B31BEA302E5AF1B2FBCEC6D9E69
987970648B9276232093695D55A806D87648B1749CB537E78BB08AA83A5001F7
609CD1D17FFA1043EB3807AF0B596AF38C91A9675E2A53196FEF45849C95F7DC
182A5EC0EC4435A8A4B6E1CDBF9A5AF457564EA72BF85228EB6FD244F2511F5A
CA9B71A65D53CC06EF5F7EC3A85106139A4D312378BC22183C09A229577B793A
1B7422611C03E84BF809F46C62CE52D3AE29CE01C32B202ACDAA5B72733EB0AE
C31D7EF7BA88D2D14F85313F7A8B9B7A5B124B03AB923744D336C969E5CE304D
3AD977A46664479EDEFB69F113024E761C05FA48A54072DF9E12C2F352ACB3E6
D04F6EEFFDE209E7FA3DA22E5B1D1409461F4286B7F4F8251B44E5CB7805762E
E129FF4A06A7458F3191926B1CAF70E32C6571AD2DC07C34FF62840896F4D200
761B1A7FA356526D1E3AB4C542AF13623BAEB9F61B1BEEF79A9205B1FEFDAE24
8799D516A9ACC30BC0139C63C9A0523E9D5439213B67D490C96F902958779B8F
68BD8E9FDDCE8A3A2E35877DB6C94B7612382ED8F218EB1157D2ADD090A2448D
10B99FBC9211C5629ED1C61C74FE93041E5AA03EA4AC3FFDA00C2B6E719CFAA4
262FE17F66804A6B54D3669836EE4367D2A2991580C5564463C973CA0DA38AC6
922716E13B4A807B50304B8826CEFEAA47C305FC07EB2AF25FA7945797237B16
56CDE17AB0834F5C97E0CC5741B061C6FF3A8DD1A79B9A173B66A6A750538E26
32FBC92E75BA15CFFE22A7302F47908547007402569158F62C29BA2956534FEA
7DACF1E507AC309DAE8C325F2A6023D2FBD81EF42146BFCE6A16A6310A650460
7B07BB7647C8760FADDF0DBBCD3DA6CC4645D1732DB3A22D8B76E1D2D48E4D4A
46F4BEB80CE65F3517283A1AE08391FD1C10ED452133706BC6725AABC80107FD
754A8BA47B0281D479F052CE26A723EFFACB79B213041A536542AB334769A2BF
88505D82C498ABDD5A73EB539530F47CAC52825D16A969C8BB56D4A7F2830B8F
CB63B92B576E7BD922A4B25E634751F8A3B7C4EBAFCB373EDC8B8281B1D1371A
7844E9AD990CFF09F0D7ED73A5CF873D2D5C9E8A9923CFA31E1A4B4CCCC40760
8B3AC8FC3C88BC08BD7407725281BB879A1A822D94997826418F1B89D303F2C0
BE7A0102E6F529630CBF1BC5BF3E4578C164A3DDE45E62A957EF3FB7F0FBBA6B
CA1E79A1ED195B6A11CFB345B663C5E72FA55D80476F604F6C4257B51686AE25
8F7D159FE605DDA0AC74BAA5034F29FFFD403070013C6E2D8EF6A0990D91173B
D5A3AEB98B64E412991505C3CB7C2CDE13C091FEB3DFBCAF30C4C19511102300
135BD5D444BB55692013F52056908DFAB2ABFACE81A58423ACEC59344CEF7D4A
C5A3EFFFFF70759BC3E593D878281225060B97D1BEE6B26EED90571FEAFA1812
1115C0EEC892F5DE6FDD68321A0B3F10A2D771B79BD85476AF6018472A499A86
07D64CFF4550866AFE590C471C80EB12CB3A989A60BC7BED39097C12D9286E39
14C7952C4C64820B4DE44A1827B7B0B535244E93FDB80036D6332F90F95B472D
7031E7E3819E881BD0313CFA112EB3AAE943C99C47635CCA7E34DC0306C04E5D
2E9F60FF037EB11602BE74E8E6B711392E866E3E55D988F7C856417A2B9C186D
639819B4786D039B77F8578EF63C088FF28BD08D8353031445C8498A8F445BC3
D08923D32AC04BF3CAFEFCCC1E77EA894F4E846F47EF62D6841B8D8576FEAE8F
90044626869D04D61D64D56E8C51AF8C18D6CC3FEF3B6C4F7D56FE3260354948
10104F69B117FB8269292579A7D52FED688C663B643D8D99F13956612271073E
1A337AED059B7A93819A28CDF01569CBEB51069D22ADAE25C47355560F402B2E
8C9900DA82B79C64497C8494F42FABE5AC41791C2010D98FB7E593C744F250DC
D837DB0EAA4F75D0016970F3AE8359878A08CF9A697A06C5EA945819151265B9
1A12122B98F79185DF852257BB4798E7DC03712EA6ED34F6E6AE1476788DBC33
9229FADB8D581BE1A63F596698DBD6DB98A092F67197A4FD4A50B648F2691875
EE2495D6BB310078F516785A0CEC7EB6E8305FDBAEB1D15690409FE32DD9CFAE
DBD3866FB63EBCAAB73E3E4BE5D7F3AA44793938AAF3F8341683F0790F1D46A3
60CE083F9BEDDA22E0639A92393960F86602216FA51E2754BC2F4CD0BDECE3D8
FFAB7E0E49613DD4956C9A10AEA798BDA1F756C755BEC12147ADECAB0FB73B7D
203A11D84DD2AB5AA98FD38C1C2573570FD49A4924A94A106D2A7D850E793608
FB135853E8C4204441CDBE697FD0CB330B1C3596F32D2BCBF263237EAB362D09
DA6F531B40384DC91F30674760CA7B64BA1968F6A7FC9EBEF431A1AFC5E76D7F
2D44DCB7F61C7F6B16196B3E8B47343F572DBA8B8B21B43E35BB6B2DD5C7982D
244FD4304D254D6CCB5E8CF70E77F50812F41A988EEB3B26BF0F6F69BBA18077
31134B5A5823D10FEF6201D045AEE7A24E0F25376E9FC66340C56C05F6CD810B
724D85CC4BB8D789834A447CBBA159565D08BA5793D8599035BB5063271518E8
F6C50E7DCE71B1D186270DDC860C6DC0CD506010EB5B1FDF6BE47A9A18CC15D7
D657E58BED9EECAD5CE5D49F63139A39BC52C6584BB2C3264D51BD584B40F8EA
AFCD8B83F548594386EB2B05CE803105E84931DC6E7A1398073D48E130E0D907
CD0F1ECC3254EDF5D4DDBF44415DC9BA66C673820CDB0FDF033D59BE2B5EFCEF
01FF9D33EDC88F8D522E07F1689D024DBCD09A16A63519E1764C8630FF36058D
CFC07027E0ECDA01E0E85B166C613B22F587B4D355EB018BA93E92A36007B4DA
287FF5A91F7D8A0EDF5554ACCF45AC8066E88865C5692E63EB99CAC81367B605
8E6C19EB98EBFE0D2D161B447B9A70CDD1122C7B78A413369016E6D8481E2AE9
9AA97B5DD0ACC9B0820F7742CEB2F46F89F3E2092621969A88DC0156B4F941A1
6BF1546D4B136657C47B082A8A35FE96016BAF3D9679B8C32EDDD6AE6DF3BFB5
7854074FA019707FC22BFA82299E72ADF9A980AE29A8E2434277E58B01F6B03C
192E1E25DADD49F6E3F69799AE62B56E00B60A031BF8721DB8B2CB6D4A4C15CA
AB1FDE010AB7DC0DDED977389B101B8E53A949222FAA126656E02817DD32B0D4
A49516CEC2B97EA7C78FD66229B044EB92F502384BCC6CCDFFF995EABE3BB7A9
50D5D1AED861E7D3BA8D333026C673C5762712E763E59261426044583D789C67
A606B96F97663F92BF104CE02FBFDFC521EC0D6670B7D4F85A229F51426DE912
3B729C4A535FB7C88D0A5E78074751B58885DD6BDD2DD9E9C83F105E8CF63DDF
CA7DB39D0319CA7CC2E73F42747F007574DE25AE1538B4D493D22D0D5F0F80C6
5F6FA3937C8391DE2F0116F81DB2DB0EF751EC838A7F85F163A6F48804E84B96
8D715EF25B7E2A5CAECC558D80F421052A1D698F3B8452AC27E30A4E6226E3CE
084C8A83ADA0818A110923CF7AC7AD4CB92AE4ABBE0A9EC1FF935FD02774C1F7
92A278E513012AD17722A23C55EF82E18F8847B5CCE47F4FE3EC508BA563F7B2
AE56C94285A18DED4D432FB0CEFC05A20BC17DDF9FF919C724810A8ED7358A27
97EC93C1A13C443A91947FE1F6F528EA7B628917FA7E554A1D7B31ED46C5ABCF
92BA57961C8876DB4041305EBB029B03D8351D5E2819FF87E97ED214D8F1CEF5
7F7668DDE223721C0B810F4A4AC81CA4EAC86EAE546E1B15D91E626FB9A31824
5BFF17C4E79FD56ADBF6DBF01BAF6453A81EBDCB38A5FC0FD0FF0646B3B0D199
13E2E59A1B5CAB6DE5329BE389BA0E2A2AB55CA40B711ED746C24F1E48892E76
6DACF7DA163CDC90CF076763008E7A899870CDED5A80758E6177BE6B93B07EB1
5800A3BF7B9AAC3FA825CE594EF5B7546B181375FA8F37608DF17856D2F8EBD5
6030A9E6F6BEAF224AD2AEF76D03B023E2FCB922CB8E3C6816AABB61FE6E4F83
F21B4935102C860ECA03DBEFCA461F0E5B93E5A8D18440BCF7D1D6252A24CB6E
A64FDAC8B67C4888519AA368D9C4A8C08C7155DF5BACD75C5196C571C3C456C4
7CE8D90215FA6EE8CDD72C48740F7F5930EC3632DB63A9C8D2DA125088C0F05A
9FC83D16B7F53163F4EB6FF372C6C3115F1E68EB35967D11126EDEDF0BF80817
E68A698183B3EB0A207DB43786E1B9D289359D75AD5E465328CAA90E712C2962
AE2A466173F2FF30EB535A6054BB0B875DC8552C16B49DF17CF84D98D35497BD
F55E273FCBB0C735899529A69990E09149FBD2DDE64B7FA8D50AE83925DF03C8
0B63EA158FBABB12A028803DA4B9DD6C48C0FEC469C4E730729F4BB420D5B003
1918B4AE9CF35CFD31E8E62A44C0484E3D00143BF1D330235E821E5CFEAB4D31
7CB4604DB1F310457FCF9075A3527279644D908DE847CCD00B6F50DBDEF91D3E
38238CAF550FDCABA2C3A46237218DCC5A09AFAF69997E1EBDA7EFE6FC99ECC8
5D4AFD5EE35FE2346BE79B499EC8EC436868154A947D13BC02C780EBA4B9E64F
3026F1BF5DC1F8D64FEA1281EA40B4BC355638A3A59BD9055BCBB232FA45EA0B
B405131B64F105814019BC55466EE78E9E9ABB62DB30EA452F7EFD7196C76A85
15B2CFCD89922CADC0F392B0C54A231F3999AEFB53C24EB0C63B0C8A1A1ABB6B
AAB2F93E5ECC7AB90EADA320E918106BAAFC1F8C425C617639984629018BA674
6FF4F338AC43E23BC3740542911C058D43A49A11CB3A0CC8E3088BB5BA6048D6
CC2AD250DE956BFBE83BB24C945C20D9C22E7105983F284EF478F9B68BFB0322
EEB7D62802CBAAEFF1C2332159DCC7243EA40CE15C734EA905E04C476B178B82
A08ABCB0B86A7330C75E62EE7844C9E22DDB013ADDF20AFE08122EE1B930A81D
806A0F8CC584CB7FF5F56F9B35E5FF78FD93E7E4A40C64537464EAA275FE88F4
461FC6A467C8A69B9A9FBC10D44AC1B753D313A8E7D97F5FAEB60F82855658D1
4DCEE043C8FCDFD8A29DD091F3BA55874A458B2B8989F35055C72FC411382361
9AADC717E602B48D7C9521D3971A6F7EB19D539445DDE9EFBC5B58FA9E5E426C
172C45CDA24985FC4632287FC3B15849DEB56F5A061993AB10A6BC59868534E6
69888175053108B77E4978D971B4EC57224C0F93EEA4C15AE92254140A94704E
ED5666FC06C5341F643F779CC88A9E81891565C63B6F7F6286E664F4E0A48690
356DC96F1B98026C563700772485B83BFA06435D4E0793EF822F423C93FBACA0
E5D889D2B76771C6F0EE997A5DB43C2F6921132890406E3C33F6F159B14C5D78
7C151BDFFDD02B697315F191B5490073EB418A4FF2A398C68D44F0CD1B87CF9C
B52F12728B72F94D752D23151196A256908135C87991E508B8906CE2539DCA8A
31F86809C8C6C18A09F6129BD7CDC6B37E76B648788056851F22BD3E3B5772FF
EC01D822B57FFDB3BAE624F05531292641FD6A7E3666152D18F6C653048DD7D7
98A942C840C4A0FA662F260B21C64214152BB86F03662A330109C5AC0A5EBA30
C6201F558858130703DF76AF4FBBEE069BDE45C0D9467077D85FFED4F9BA9C61
AED87D67CDCA453A6528AC5BA153E1039D9CCC556CEA5CBB542265FF54A1B208
E0E13740E7E7C26AA00AEE909F8F3ADC2726081A744D8EF6BB711BF5F611A900
76F91C26A338DA13A7160A9F42410CCEB3190000D963D036FDA05A29F598EF40
8FAE6F8E7E6F50C99C3304A573501C13A00023085F057DF331E3354CBE65D573
CAE73BF15B3B96B502E0AAF2B4A86237E98A997AAEFFF4227D5A26E8972C48E7
761F430733E6EF8AB2D903C17FAFBFA21C25F8A0AC157D397BF3CC1AE7598F0A
2BE4FB46B29443CE57F41FD5F91122E9D86F903E94D5B55E2BB95949C156D138
89883BEFD634311F9280C7F028DCA6408D3A682DF5B55B9F7ABF08F019190F60
D39E4F0E80F0594235B09A5320109638B938633A2C196E4ED2B43DCD8643C3CF
C6123B076B7F73352F906D96FDE0FBF50CCCA432712C574D5857838BAC30B485
D25024EB254A7EFE57D1DF0892C275CDB3DF77602F0FED0FAEBC644BCACA04B8
B424DB125E487794CAB36E01B5E1A26F5E1E97A739AA36D77A12F5B45338EB39
AF36CEBDED55DCBFCF497FD475FC6BAB5530AD6153C6BD982564EE8712185F1F
D5EA7ADF4104661168A01994C1FD773A50C8AD6A3E4D332E4D59521BB8BBC6C3
866EB4AC3EA4532477E6CBF6BBF0860031C3B916AA25E3492670EA67F55CF4FD
207C684A0DDB6F4AD21B2909CBA71BCE2E762012B0927BA72367A6AE0AF87F73
756C9BC85E4EDE35317E2CCCD138C02C7A8013AFDC1A48C3A4BB8EF257BDEEA7
60E012F54D12D31D18DC59D5E526F12567B8688B4B67E16B56713870300016BD
A3B9DA87FDC865246AF8E94316799110D86B1DDADB8A673402D4226C519C058A
1D1E5A5778584FC28AF12819B1924060BC4F54B1054EA6AB0149E04B8C4302D4
A56D8A347EB5D3D2A0E12CF7E35059BDB53D9FF6BD25F6D9619BC4669CFC1048
C6C9978B8751B840F27D82A69075832BE59F55C1737CBB1220FB8FF691FDBDF3
03BD7D225A9372AC221C38245E48320E1CCF898D9EEDD678E5B8C65B7F588321
1A3953EEB9B39EA9A8CB72DB08C3E9234DFFF5FDF9DF804C021D57E97DA7622B
97F4CB6E0EB640E0DC9EA15C5193F92A3A7565F4C7A4C9CC327F7CD2C44900AE
D9E76FFE62FC37FA376E77131B566AE67C3E09DA80F198BBB995EE8FA47EEDB8
4B467C6C7DB8AEA745CF8C56B8BE56534E9C56FCB2B7006426DFE93D728FA4CF
94F131C549814E54ECE7C914C5FE8E4961D3437CE7475D03534B62650F551D97
201C794AA877445DBEB11C85ADF6119B05360700F8CEDE4766E3A1D7A35CDDC7
9ABF7C619E3868A39D1852DBE1EEAF5D7898C78323873AC005542B68C43C5000
CC58F675EB595F87C879694751494676465891E8A897158B481F11A171CCBBD7
29603F00210CFD7FF31FE3D273933ECC34AFBCC4108D9B76D9ECE63EA06CF939
4799092A54A749DACB82C1424E9879672C8BC084C360014C9C1B6D5D65C68AED
66CE329C3AD712C0A36BE7EF03FDF339CAA2E0336D387A693B1DFAB5D5164E31
14755A158168962C9B399F8F1DF3FF5060D7464D5071058C30C572A2BC7DEE53
84BD7614A4BEC4C84E18CF7EC81C811724463BD46CECA5FB57B0F55EAE20CC74
6AD815D1897B037C197D2456797B992C20C70B663BF99FE28C513B4E221C8E12
49779F8C0AE8517048ADDF7CDF0D698E3EFE60071C4997B7F5EF12B6CB65390C
224F13FBB99FFC034C0710F05019899689B6D3350BBA65C7CE7C2AB03D81B9A5
5F3D65E4D462DAB189006669F7390A78A1B8908A4C913B15DB8827DFF15BB9A4
A6037DDB643103B937257A7DAB025F09D53FBBC2BCB6B0BCD8D56B2B2784E498
1F6CF8470DCC892AD0CFE11578718948BABF9C1427084643B66BB9181094E29D
5FBE37708E1D8A6B7518A96876844CB66954227A7A6AF28DD075A462526DD5D6
40EECC56FA366106E55C7068997B54B7F0D03AC1AD45D28C67C7ECA99DBEDB1C
E18A79C353113E2E05B837E703278B202112B1C69E42A69D64B62F0E7D8F7E5B
C1F93F0F99EC20EF312046F4B0CD7DAB31E422070B629A7FA96583CF3F1519CD
CF08806F40ACD7BB5C960F21E9DA7FB3C72CBA0801ADE83DF738A4EC94F2977D
2B95A166BA5655E4E4075807E0F38521430B4EB6B722387E0957ABAC4154FEFB
3176DADA406FF032475AEE1CE2C281049A408063F104535CAA2E7DAE2B768E6E
165BC8040D6C98090C372BF90FC389A20A9CF758831EEBA2B7616EA2AC53672B
CC71354F8567B9C61A98BAB478FAF6EA04CFDF7926E590ACCD9266C824477168
51145278746C85BA904296B398DCD544D060A80D7FCD024F3DC042F4E7B88405
D15558A2C7E77AD3779AEFBB2233EA71AA1C06450F403A6DCE06EC145183F201
B20F7628C20293BFE0465F7AECF1C4837B5EC7D36FFDDB9817E336A31D704238
98A128BCB0AC4FE87095372EF9A4133EEA8050D801D797A1C275ED9570B160
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 8000 8000 (FiguresHTML.dvi)
@start /Fa 212[1012 43[{}1 1328.35 /CMR12 rf /Fb 255[1033{}1
1328.35 /CMSY10 rf /Fc 234[1093 21[{}1 1912.83 /CMMI12
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 2 0 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 8524 68859 a @beginspecial 0 @llx 0 @lly
427 @urx 636 @ury 4270 @rwi @setspecial
%%BeginDocument: FiguresNoLabels/HTML_BigOlePhaseDiagram.eps
%!PS-Adobe-3.0 EPSF-3.0
%XpdfVersion: 4.00
%%Creator: \050MATLAB, The Mathworks, Inc. Version 9.4.0.813654 \\(R2018a\\). Operating System: Mac OS X)
%%Title: /private/var/folders/rz/n9mfbpg95p96s27hs79sb58s3yn6js/T/tp584e7506_60e1_48cc_9914_40aa69995278.eps
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 427 636
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 4.00 0
%%Copyright: Copyright 1996-2017 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /pdfDuplex exch def
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      pdfDuplex { /Duplex true def } if
    currentdict end setpagedevice
  } if
  /pdfPageW 0 def
  /pdfPageH 0 def
} def
/pdfSetupPaper {
  2 copy pdfPageH ne exch pdfPageW ne or {
    /pdfPageH exch def
    /pdfPageW exch def
    /setpagedevice where {
      pop 3 dict begin
        /PageSize [pdfPageW pdfPageH] def
        pdfDuplex { /Duplex true def } if
        /ImagingBBox null def
      currentdict end setpagedevice
    } if
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not {
        pdfFillCS setcolorspace pdfFillOP setoverprint
      } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
      /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not {
        pdfStrokeCS setcolorspace pdfStrokeOP setoverprint
      } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
      /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/Tj3 {
  pdfTextRender 3 and 3 ne {    fCol
    0 pdfTextRise pdfTextMat dtransform rmoveto
    xyshow2
    0 pdfTextRise neg pdfTextMat dtransform rmoveto
  } {
    pop pop
  } ifelse
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr {
  4 2 roll exch 5 index div exch 4 index div moveto
  exch 3 index div dup 0 rlineto
  exch 2 index div 0 exch rlineto
  neg 0 rlineto
  closepath
} def
/pdfImClip { gsave clip } def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 2 lt {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
end
%%EndSetup
xpdf begin
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 427 636 re
W
q
[0.1 0 0 0.1 0 0] cm
/DeviceGray {} cs
[1] sc
40 52.5 4180 6270 re
f
20 w
2 J
1 j
/DeviceGray {} CS
[0.1489] SC
40 52.5 m
4220 52.5 l
S
40 6322.5 m
4220 6322.5 l
S
40 52.5 m
40 115.199 l
S
2130 52.5 m
2130 115.199 l
S
4220 52.5 m
4220 115.199 l
S
40 6322.5 m
40 6259.8 l
S
2130 6322.5 m
2130 6259.8 l
S
4220 6322.5 m
4220 6259.8 l
S
40 52.5 m
40 6322.5 l
S
4220 52.5 m
4220 6322.5 l
S
40 52.5 m
102.699 52.5 l
S
40 2142.5 m
102.699 2142.5 l
S
40 4232.5 m
102.699 4232.5 l
S
40 6322.5 m
102.699 6322.5 l
S
4220 52.5 m
4157.3 52.5 l
S
4220 2142.5 m
4157.3 2142.5 l
S
4220 4232.5 m
4157.3 4232.5 l
S
4220 6322.5 m
4157.3 6322.5 l
S
30 w
0 J
/DeviceRGB {} CS
[0 1 1] SC
39.8906 52.25 m
51.2813 77.7305 l
93.3086 171.699 l
135.199 265.379 l
176.871 358.539 l
218.211 450.98 l
259.141 542.5 l
299.578 632.941 l
339.469 722.141 l
378.762 809.98 l
417.391 896.371 l
455.34 981.23 l
492.582 1064.51 l
529.102 1146.17 l
564.898 1226.2 l
599.961 1304.61 l
634.301 1381.4 l
667.93 1456.6 l
700.871 1530.24 l
733.121 1602.37 l
764.711 1673.01 l
795.672 1742.22 l
826 1810.05 l
855.73 1876.53 l
884.891 1941.73 l
913.488 2005.68 l
941.551 2068.44 l
969.109 2130.05 l
996.16 2190.55 l
1022.75 2249.99 l
1048.87 2308.41 l
1074.56 2365.84 l
1099.82 2422.33 l
1124.68 2477.92 l
1149.15 2532.62 l
1173.24 2586.49 l
1196.96 2639.55 l
1220.34 2691.83 l
1243.39 2743.35 l
1266.1 2794.15 l
1288.51 2844.25 l
1310.61 2893.68 l
1332.43 2942.45 l
1353.96 2990.6 l
1375.22 3038.13 l
1396.21 3085.08 l
1416.95 3131.45 l
1437.44 3177.28 l
1457.7 3222.57 l
1477.72 3267.34 l
1497.52 3311.61 l
1517.1 3355.39 l
1536.47 3398.7 l
1555.63 3441.55 l
1574.59 3483.95 l
1593.36 3525.92 l
1611.94 3567.47 l
1630.34 3608.61 l
1648.56 3649.34 l
1666.6 3689.69 l
1684.48 3729.66 l
1702.19 3769.27 l
1719.74 3808.51 l
1737.13 3847.41 l
1754.37 3885.96 l
1771.47 3924.17 l
1788.41 3962.07 l
1805.22 3999.64 l
1821.88 4036.91 l
1838.41 4073.87 l
1854.81 4110.54 l
1871.08 4146.91 l
1887.22 4183 l
1903.24 4218.82 l
1919.13 4254.37 l
1934.91 4289.64 l
1950.57 4324.66 l
1966.12 4359.43 l
1981.55 4393.95 l
1996.88 4428.22 l
2012.1 4462.25 l
2027.22 4496.05 l
2042.23 4529.62 l
2057.14 4562.96 l
2071.95 4596.08 l
2086.67 4628.99 l
2101.29 4661.68 l
2110.98 4683.36 l
2117.42 4697.76 l
2121.71 4707.34 l
2124.56 4713.71 l
2126.46 4717.96 l
2127.72 4720.79 l
2128.56 4722.67 l
2129.13 4723.93 l
2129.5 4724.77 l
2130 4725.88 l
2130.5 4727 l
2130.87 4727.84 l
2131.43 4729.09 l
2132.28 4730.97 l
2133.54 4733.79 l
2135.43 4738.02 l
2138.26 4744.36 l
2142.51 4753.85 l
2148.86 4768.06 l
2158.36 4789.29 l
2172.53 4820.98 l
2186.62 4852.48 l
2200.62 4883.79 l
2214.54 4914.92 l
2228.38 4945.87 l
2242.14 4976.63 l
2255.82 5007.22 l
2269.42 5037.64 l
2282.95 5067.89 l
2296.4 5097.97 l
2309.78 5127.89 l
2323.09 5157.64 l
2336.33 5187.24 l
2349.49 5216.68 l
2369.11 5260.55 l
2388.58 5304.08 l
2407.89 5347.27 l
2427.07 5390.14 l
2446.1 5432.7 l
2464.99 5474.94 l
2483.74 5516.88 l
2502.37 5558.52 l
2520.86 5599.86 l
2539.22 5640.92 l
2557.46 5681.7 l
2575.57 5722.21 l
2593.56 5762.44 l
2611.44 5802.41 l
2629.2 5842.12 l
2646.84 5881.58 l
2664.38 5920.79 l
2681.8 5959.75 l
2699.12 5998.47 l
2716.33 6036.95 l
2733.44 6075.21 l
2750.44 6113.23 l
2767.34 6151.03 l
2786.76 6194.45 l
2806.06 6237.59 l
2825.22 6280.44 l
2844.14 6322.75 l
S
2844.14 6322.75 m
41.3594 55.5508 l
50.8086 76.6602 l
60.25 97.7813 l
69.6914 118.879 l
79.1211 139.969 l
88.5391 161.039 l
97.9609 182.09 l
107.359 203.121 l
116.75 224.121 l
126.129 245.082 l
129.629 252.91 l
138.98 273.82 l
148.309 294.691 l
157.629 315.52 l
166.922 336.301 l
176.191 357.02 l
185.43 377.691 l
194.648 398.309 l
203.84 418.859 l
213 439.34 l
222.129 459.762 l
231.23 480.109 l
240.301 500.391 l
249.34 520.602 l
258.34 540.719 l
267.309 560.77 l
276.23 580.738 l
277.77 584.16 l
286.648 604.031 l
295.5 623.82 l
304.309 643.52 l
313.078 663.129 l
321.809 682.652 l
330.5 702.082 l
339.148 721.422 l
347.762 740.672 l
356.328 759.828 l
364.852 778.891 l
373.328 797.852 l
381.77 816.719 l
390.172 835.5 l
398.52 854.18 l
406.828 872.762 l
415.102 891.25 l
417.98 897.68 l
426.191 916.039 l
434.352 934.289 l
442.469 952.449 l
450.551 970.52 l
458.582 988.48 l
466.578 1006.35 l
474.52 1024.12 l
482.43 1041.8 l
490.289 1059.38 l
498.109 1076.87 l
505.891 1094.26 l
513.621 1111.55 l
521.309 1128.75 l
528.961 1145.86 l
536.57 1162.87 l
544.141 1179.79 l
551.672 1196.62 l
559.148 1213.35 l
566.59 1230 l
574 1246.55 l
581.359 1263.02 l
588.68 1279.4 l
595.969 1295.68 l
603.211 1311.89 l
610.422 1328 l
617.59 1344.03 l
624.719 1359.97 l
631.809 1375.83 l
638.859 1391.6 l
645.879 1407.29 l
652.859 1422.9 l
659.801 1438.42 l
666.711 1453.87 l
673.582 1469.23 l
680.422 1484.52 l
687.219 1499.73 l
693.988 1514.86 l
700.719 1529.91 l
707.41 1544.88 l
714.082 1559.78 l
720.711 1574.61 l
727.301 1589.36 l
733.871 1604.04 l
740.398 1618.64 l
746.898 1633.18 l
753.371 1647.64 l
759.801 1662.03 l
766.211 1676.35 l
772.578 1690.61 l
778.93 1704.79 l
785.238 1718.91 l
791.52 1732.96 l
797.781 1746.94 l
804 1760.86 l
810.199 1774.71 l
816.359 1788.5 l
822.5 1802.23 l
828.609 1815.89 l
834.699 1829.49 l
840.75 1843.03 l
846.781 1856.51 l
852.781 1869.93 l
858.75 1883.29 l
864.699 1896.58 l
868.648 1905.42 l
871.281 1911.29 l
873.031 1915.2 l
874.191 1917.81 l
874.969 1919.54 l
876 1921.85 l
877.031 1924.16 l
877.809 1925.89 l
878.969 1928.49 l
880.711 1932.38 l
883.309 1938.2 l
887.211 1946.91 l
893.031 1959.93 l
898.828 1972.9 l
904.602 1985.81 l
910.352 1998.67 l
916.082 2011.47 l
921.781 2024.22 l
927.461 2036.91 l
933.109 2049.56 l
938.738 2062.15 l
944.352 2074.69 l
949.941 2087.18 l
955.5 2099.62 l
961.039 2112.01 l
966.559 2124.35 l
972.059 2136.64 l
977.531 2148.88 l
982.98 2161.08 l
988.422 2173.22 l
993.828 2185.32 l
999.219 2197.38 l
1004.59 2209.38 l
1009.94 2221.35 l
1015.27 2233.26 l
1020.58 2245.13 l
1025.87 2256.96 l
1031.13 2268.75 l
1036.39 2280.48 l
1041.62 2292.18 l
1049.43 2309.65 l
1057.19 2327.02 l
1064.92 2344.29 l
1072.61 2361.48 l
1080.25 2378.57 l
1087.85 2395.57 l
1095.42 2412.49 l
1102.94 2429.31 l
1110.43 2446.05 l
1117.88 2462.71 l
1125.29 2479.28 l
1132.66 2495.77 l
1140 2512.18 l
1147.3 2528.5 l
1154.57 2544.75 l
1161.8 2560.92 l
1168.99 2577.01 l
1176.16 2593.02 l
1183.28 2608.96 l
1190.38 2624.82 l
1197.44 2640.61 l
1204.47 2656.33 l
1211.46 2671.97 l
1218.43 2687.54 l
1225.36 2703.05 l
1232.26 2718.48 l
1239.13 2733.84 l
1245.97 2749.14 l
1252.79 2764.37 l
1259.57 2779.53 l
1266.32 2794.63 l
1273.04 2809.67 l
1279.74 2824.63 l
1286.4 2839.54 l
1293.04 2854.38 l
1299.65 2869.17 l
1306.23 2883.89 l
1312.79 2898.55 l
1322.57 2920.42 l
1332.3 2942.17 l
1341.97 2963.79 l
1351.58 2985.27 l
1361.13 3006.64 l
1370.63 3027.87 l
1380.07 3048.99 l
1389.46 3069.99 l
1398.8 3090.86 l
1408.08 3111.63 l
1417.32 3132.27 l
1426.5 3152.81 l
1435.63 3173.23 l
1444.72 3193.54 l
1453.75 3213.75 l
1462.74 3233.85 l
1471.68 3253.84 l
1480.58 3273.74 l
1489.43 3293.52 l
1498.24 3313.21 l
1507 3332.8 l
1515.71 3352.3 l
1524.39 3371.69 l
1533.02 3390.99 l
1541.61 3410.2 l
1550.16 3429.32 l
1558.67 3448.34 l
1567.14 3467.28 l
1575.56 3486.12 l
1583.95 3504.88 l
1592.3 3523.55 l
1600.62 3542.14 l
1608.89 3560.64 l
1621.23 3588.24 l
1633.49 3615.66 l
1645.67 3642.89 l
1657.77 3669.95 l
1669.8 3696.83 l
1681.74 3723.55 l
1693.61 3750.09 l
1705.41 3776.48 l
1717.14 3802.7 l
1728.79 3828.76 l
1740.38 3854.66 l
1751.9 3880.41 l
1763.34 3906.02 l
1774.73 3931.47 l
1786.04 3956.77 l
1797.3 3981.94 l
1808.49 4006.96 l
1819.62 4031.84 l
1830.68 4056.59 l
1841.69 4081.2 l
1852.64 4105.68 l
1863.52 4130.02 l
1874.36 4154.24 l
1885.13 4178.33 l
1895.85 4202.3 l
1906.51 4226.15 l
1917.12 4249.87 l
1927.68 4273.47 l
1938.18 4296.96 l
1948.63 4320.33 l
1964.21 4355.17 l
1979.68 4389.76 l
1995.04 4424.1 l
2010.29 4458.2 l
2025.44 4492.07 l
2040.48 4525.7 l
2055.41 4559.1 l
2070.25 4592.28 l
2084.99 4625.25 l
2099.64 4657.99 l
2114.19 4690.53 l
2128.65 4722.86 l
2143.01 4754.98 l
2157.29 4786.91 l
2171.48 4818.64 l
2185.59 4850.18 l
2199.61 4881.52 l
2213.54 4912.69 l
2227.4 4943.67 l
2241.17 4974.47 l
2254.87 5005.09 l
2268.48 5035.54 l
2282.02 5065.82 l
2295.49 5095.93 l
2308.88 5125.87 l
2322.2 5155.66 l
2342.05 5200.03 l
2361.73 5244.05 l
2381.27 5287.73 l
2400.65 5331.07 l
2419.89 5374.09 l
2438.98 5416.78 l
2457.93 5459.15 l
2476.74 5501.22 l
2495.42 5542.99 l
2513.97 5584.46 l
2532.38 5625.64 l
2550.67 5666.54 l
2568.84 5707.16 l
2586.88 5747.51 l
2604.81 5787.59 l
2622.62 5827.41 l
2640.31 5866.97 l
2657.89 5906.28 l
2675.36 5945.34 l
2692.72 5984.16 l
2709.97 6022.74 l
2727.12 6061.09 l
2744.17 6099.21 l
2763.75 6142.99 l
2783.2 6186.48 l
2802.52 6229.68 l
2821.71 6272.59 l
2840.78 6315.23 l
2844.14 6322.75 l
S
2844.14 6322.75 m
2840.59 6314.81 l
2797.94 6219.43 l
2797.94 6219.43 l
2755.28 6124.05 l
2712.63 6028.68 l
2669.97 5933.3 l
2627.32 5837.93 l
2627.32 5837.93 l
2584.67 5742.55 l
2542.02 5647.18 l
2499.36 5551.8 l
2456.71 5456.43 l
2456.71 5456.43 l
2414.06 5361.06 l
2371.41 5265.69 l
2371.41 5265.69 l
2328.76 5170.32 l
2286.11 5074.96 l
2243.46 4979.59 l
2200.81 4884.23 l
2158.17 4788.87 l
2115.52 4693.51 l
2072.88 4598.15 l
2030.23 4502.79 l
1987.59 4407.44 l
1944.94 4312.09 l
1902.3 4216.74 l
1859.66 4121.39 l
1817.03 4026.05 l
1774.39 3930.71 l
1731.76 3835.38 l
1731.76 3835.38 l
1689.12 3740.05 l
1689.12 3740.05 l
1648.66 3649.57 l
1608.2 3559.1 l
1567.74 3468.63 l
1527.29 3378.18 l
1486.84 3287.73 l
1446.4 3197.3 l
1446.4 3197.3 l
1426.18 3152.1 l
1405.97 3106.89 l
1405.97 3106.89 l
1395.86 3084.3 l
1385.75 3061.7 l
1375.65 3039.1 l
1365.55 3016.51 l
1355.44 2993.92 l
1345.34 2971.34 l
1335.24 2948.75 l
1325.14 2926.17 l
1315.05 2903.59 l
1304.95 2881.02 l
1294.86 2858.45 l
1284.77 2835.88 l
1274.68 2813.32 l
1264.59 2790.76 l
1254.51 2768.22 l
1244.43 2745.68 l
1244.42 2745.68 l
1237.71 2730.65 l
1230.99 2715.64 l
1224.28 2700.63 l
1217.57 2685.62 l
1210.86 2670.62 l
1204.16 2655.63 l
1197.45 2640.65 l
1190.76 2625.67 l
1184.07 2610.71 l
1177.38 2595.76 l
1170.7 2580.83 l
1164.03 2565.92 l
1157.37 2551.03 l
1150.73 2536.16 l
1144.1 2521.34 l
1137.49 2506.56 l
1137.49 2506.56 l
1133.1 2496.75 l
1128.72 2486.96 l
1124.37 2477.22 l
1120.04 2467.54 l
1115.74 2457.92 l
1111.48 2448.41 l
1111.48 2448.4 l
1109.37 2443.69 l
1107.29 2439.03 l
1105.22 2434.4 l
1103.18 2429.84 l
1101.17 2425.35 l
1099.2 2420.94 l
1097.28 2416.65 l
1095.42 2412.5 l
1093.65 2408.53 l
1091.98 2404.79 l
1090.44 2401.36 l
1089.07 2398.29 l
1087.9 2395.67 l
1086.95 2393.54 l
1086.24 2391.96 l
1086.24 2391.95 l
1085.96 2391.34 l
1085.73 2390.83 l
1085.55 2390.41 l
1085.4 2390.08 l
1085.28 2389.81 l
1085.19 2389.61 l
1085.12 2389.45 l
1085.03 2389.27 l
1085.02 2389.23 l
1085.01 2389.22 l
S
/DeviceRGB {} CS
[1 0 0] SC
1171.1 2783.22 m
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.22 l
1171.1 2783.23 l
1171.11 2783.24 l
1171.12 2783.26 l
1171.13 2783.28 l
1171.15 2783.33 l
1171.18 2783.4 l
1171.36 2783.83 l
1171.53 2784.25 l
1171.88 2785.1 l
1172.33 2786.19 l
1172.88 2787.53 l
1174.29 2790.92 l
1178.24 2800.46 l
1183.6 2813.4 l
1190.21 2829.36 l
1197.92 2847.97 l
1206.59 2868.91 l
1216.11 2891.87 l
1226.36 2916.63 l
1237.28 2942.99 l
1248.8 2970.8 l
1260.88 2999.96 l
1273.47 3030.37 l
1284.5 3056.99 l
1298 3089.57 l
1311.96 3123.29 l
1326.39 3158.12 l
1341.28 3194.06 l
1356.62 3231.11 l
1372.43 3269.28 l
1388.71 3308.57 l
1405.45 3348.99 l
1422.67 3390.56 l
1440.37 3433.29 l
1458.55 3477.19 l
1477.22 3522.27 l
1496.38 3568.51 l
1516.02 3615.94 l
1536.15 3664.53 l
1556.75 3714.27 l
1577.83 3765.15 l
1599.37 3817.14 l
1621.35 3870.22 l
1643.77 3924.35 l
1666.61 3979.49 l
1689.85 4035.6 l
1713.48 4092.64 l
1737.47 4150.56 l
1761.81 4209.31 l
1786.47 4268.84 l
1811.43 4329.11 l
1836.68 4390.08 l
1862.2 4451.68 l
1887.96 4513.88 l
1913.96 4576.63 l
1940.16 4639.9 l
1966.56 4703.64 l
1993.15 4767.81 l
2019.9 4832.4 l
2046.8 4897.35 l
2073.85 4962.65 l
2101.03 5028.26 l
2128.33 5094.16 l
2155.73 5160.33 l
2183.25 5226.75 l
2210.85 5293.4 l
2238.54 5360.25 l
2266.31 5427.29 l
2294.16 5494.52 l
2322.07 5561.91 l
2350.05 5629.44 l
2378.08 5697.12 l
2406.17 5764.93 l
2434.3 5832.86 l
2462.49 5900.9 l
2490.71 5969.05 l
2518.98 6037.29 l
2547.28 6105.62 l
2575.62 6174.03 l
2603.99 6242.52 l
2632.39 6311.08 l
2637.22 6322.75 l
S
2770.71 1183.6 m
2770.71 1183.6 l
2770.72 1183.6 l
2770.72 1183.6 l
2770.72 1183.6 l
2770.72 1183.6 l
2770.73 1183.61 l
2770.75 1183.61 l
2770.76 1183.62 l
2770.78 1183.63 l
2770.87 1183.66 l
2771.17 1183.79 l
2771.62 1183.98 l
2772.24 1184.23 l
2773 1184.55 l
2773.92 1184.93 l
2774.99 1185.37 l
2776.22 1185.88 l
2777.59 1186.45 l
2779.11 1187.08 l
2780.77 1187.76 l
2782.57 1188.51 l
2784.52 1189.32 l
2786.6 1190.18 l
2788.81 1191.1 l
2791.16 1192.07 l
2793.64 1193.09 l
2796.24 1194.17 l
2798.96 1195.3 l
2801.8 1196.48 l
2804.76 1197.7 l
2807.84 1198.98 l
2811.02 1200.3 l
2814.32 1201.66 l
2817.72 1203.07 l
2821.22 1204.52 l
2824.82 1206.01 l
2828.52 1207.54 l
2832.32 1209.12 l
2836.2 1210.73 l
2840.18 1212.37 l
2844.24 1214.06 l
2848.39 1215.78 l
2852.63 1217.53 l
2856.94 1219.31 l
2861.33 1221.13 l
2865.8 1222.99 l
2870.34 1224.87 l
2874.96 1226.78 l
2879.65 1228.72 l
2884.41 1230.69 l
2889.24 1232.69 l
2894.13 1234.72 l
2899.09 1236.77 l
2904.11 1238.85 l
2909.19 1240.96 l
2914.34 1243.09 l
2919.54 1245.25 l
2924.81 1247.43 l
2930.13 1249.63 l
2935.51 1251.86 l
2940.94 1254.11 l
2946.43 1256.38 l
2951.98 1258.68 l
2957.57 1261 l
2963.22 1263.34 l
2968.92 1265.7 l
2974.67 1268.08 l
2980.47 1270.48 l
2986.33 1272.91 l
2992.23 1275.35 l
2998.17 1277.82 l
3004.17 1280.3 l
3010.22 1282.8 l
3016.31 1285.33 l
3022.45 1287.87 l
3028.63 1290.43 l
3034.86 1293.01 l
3041.14 1295.61 l
3047.46 1298.23 l
3053.83 1300.87 l
3060.24 1303.52 l
3066.69 1306.2 l
3073.19 1308.89 l
3079.74 1311.6 l
3086.33 1314.33 l
3092.96 1317.08 l
3099.64 1319.84 l
3106.36 1322.63 l
3113.12 1325.43 l
3119.93 1328.25 l
3126.78 1331.09 l
3133.67 1333.94 l
3140.61 1336.81 l
3147.59 1339.71 l
3154.61 1342.62 l
3161.68 1345.54 l
3166.42 1347.5 l
3169.58 1348.82 l
3171.7 1349.69 l
3173.11 1350.28 l
3175 1351.06 l
3176.89 1351.84 l
3178.31 1352.43 l
3180.44 1353.31 l
3183.64 1354.64 l
3188.47 1356.64 l
3195.74 1359.65 l
3203.05 1362.68 l
3210.41 1365.73 l
3217.81 1368.79 l
3225.26 1371.88 l
3232.75 1374.98 l
3240.28 1378.1 l
3247.86 1381.24 l
3255.48 1384.39 l
3263.14 1387.57 l
3270.85 1390.76 l
3278.6 1393.97 l
3286.4 1397.2 l
3294.24 1400.45 l
3302.12 1403.71 l
3310.05 1407 l
3318.02 1410.3 l
3326.04 1413.62 l
3334.1 1416.96 l
3342.21 1420.32 l
3350.36 1423.7 l
3358.56 1427.09 l
3366.8 1430.51 l
3375.09 1433.94 l
3383.42 1437.39 l
3391.8 1440.86 l
3400.22 1444.35 l
3408.69 1447.86 l
3417.2 1451.38 l
3425.76 1454.93 l
3434.36 1458.49 l
3443.01 1462.07 l
3451.71 1465.68 l
3460.45 1469.3 l
3469.24 1472.94 l
3478.07 1476.6 l
3486.95 1480.27 l
3495.88 1483.97 l
3504.85 1487.69 l
3513.87 1491.42 l
3522.93 1495.18 l
3532.04 1498.95 l
3541.19 1502.74 l
3550.39 1506.55 l
3559.64 1510.38 l
3568.93 1514.23 l
3578.27 1518.1 l
3587.65 1521.99 l
3597.08 1525.89 l
3606.56 1529.82 l
3616.08 1533.76 l
3625.64 1537.72 l
3635.25 1541.7 l
3644.91 1545.7 l
3654.61 1549.72 l
3664.36 1553.76 l
3674.15 1557.81 l
3683.99 1561.89 l
3693.87 1565.98 l
3703.79 1570.09 l
3713.76 1574.22 l
3723.78 1578.37 l
3733.83 1582.54 l
3743.94 1586.72 l
3754.08 1590.92 l
3764.27 1595.14 l
3774.5 1599.38 l
3784.78 1603.64 l
3795.09 1607.91 l
3805.45 1612.2 l
3815.86 1616.51 l
3826.3 1620.84 l
3836.79 1625.18 l
3847.31 1629.54 l
3857.88 1633.92 l
3868.49 1638.31 l
3879.14 1642.73 l
3889.84 1647.15 l
3900.57 1651.6 l
3911.34 1656.06 l
3922.15 1660.54 l
3933 1665.03 l
3943.89 1669.54 l
3954.82 1674.07 l
3965.78 1678.61 l
3976.78 1683.17 l
3987.83 1687.74 l
3998.9 1692.33 l
4010.02 1696.94 l
4021.17 1701.56 l
4032.36 1706.19 l
4043.58 1710.84 l
4054.84 1715.5 l
4066.14 1720.18 l
4077.47 1724.87 l
4088.83 1729.58 l
4100.23 1734.3 l
4111.66 1739.04 l
4123.13 1743.79 l
4134.63 1748.55 l
4146.16 1753.33 l
4157.72 1758.12 l
4169.32 1762.92 l
4180.94 1767.73 l
4192.6 1772.56 l
4204.29 1777.4 l
4216.01 1782.26 l
4220.25 1784.02 l
S
/DeviceRGB {} CS
[0 0 1] SC
4220.25 2271.51 m
4197.38 2250.68 l
4158.35 2215.28 l
4119.29 2180 l
4080.2 2144.86 l
4041.07 2109.85 l
4001.91 2075 l
3962.72 2040.32 l
3923.5 2005.8 l
3884.25 1971.48 l
3844.96 1937.36 l
3805.64 1903.45 l
3766.3 1869.78 l
3726.92 1836.36 l
3687.52 1803.21 l
3648.09 1770.35 l
3608.64 1737.81 l
3569.18 1705.61 l
3529.7 1673.78 l
3490.22 1642.34 l
3450.73 1611.34 l
3411.25 1580.8 l
3371.78 1550.75 l
3332.33 1521.25 l
3292.92 1492.33 l
3253.55 1464.03 l
3214.24 1436.41 l
3175 1409.51 l
3159.68 1399.2 l
3120.57 1373.39 l
3081.56 1348.42 l
3042.68 1324.35 l
3003.95 1301.24 l
2965.37 1279.14 l
2926.97 1258.1 l
2888.77 1238.17 l
2850.76 1219.41 l
2812.98 1201.86 l
2775.43 1185.56 l
2738.1 1170.55 l
2701.02 1156.88 l
2664.17 1144.56 l
2627.55 1133.63 l
2591.16 1124.11 l
2554.98 1116.02 l
2519 1109.37 l
2483.2 1104.19 l
2447.56 1100.48 l
2412.06 1098.25 l
2376.69 1097.5 l
2375.56 1097.5 l
2340.29 1098.3 l
2305.09 1100.59 l
2269.95 1104.37 l
2234.85 1109.66 l
2199.77 1116.44 l
2164.7 1124.71 l
2129.64 1134.47 l
2094.57 1145.7 l
2059.5 1158.39 l
2024.43 1172.52 l
1989.38 1188.06 l
1954.36 1204.99 l
1919.39 1223.28 l
1884.5 1242.88 l
1849.72 1263.76 l
1815.09 1285.86 l
1780.64 1309.14 l
1746.42 1333.54 l
1712.48 1359.01 l
1678.85 1385.48 l
1645.6 1412.9 l
1612.76 1441.21 l
1580.41 1470.35 l
1548.59 1500.24 l
1517.36 1530.85 l
1486.78 1562.1 l
1456.9 1593.94 l
1427.79 1626.31 l
1399.51 1659.15 l
1372.12 1692.42 l
1345.68 1726.06 l
1320.25 1760.02 l
1295.88 1794.24 l
1272.64 1828.7 l
1250.57 1863.34 l
1229.74 1898.12 l
1210.18 1933.01 l
1191.93 1967.98 l
1175.04 2003 l
1159.54 2038.05 l
1145.46 2073.12 l
1132.82 2108.19 l
1121.64 2143.26 l
1111.93 2178.33 l
1103.7 2213.4 l
1096.97 2248.47 l
1091.73 2283.58 l
1087.99 2318.72 l
1085.75 2353.92 l
1085 2389.19 l
1085.01 2393.37 l
1085.93 2428.75 l
1088.34 2464.26 l
1092.23 2499.92 l
1097.58 2535.74 l
1104.4 2571.74 l
1112.66 2607.95 l
1122.35 2644.37 l
1133.44 2681.01 l
1145.92 2717.89 l
1159.76 2755 l
1174.92 2792.35 l
1191.37 2829.94 l
1209.07 2867.75 l
1227.97 2905.77 l
1248.03 2944 l
1269.2 2982.42 l
1291.42 3021.02 l
1314.65 3059.77 l
1338.83 3098.67 l
1363.89 3137.69 l
1389.8 3176.81 l
1416.5 3216.03 l
1443.93 3255.32 l
1472.05 3294.68 l
1500.8 3334.08 l
1530.15 3373.52 l
1560.05 3412.98 l
1590.46 3452.46 l
1621.34 3491.95 l
1652.66 3531.43 l
1684.39 3570.91 l
1716.49 3610.38 l
1748.94 3649.84 l
1781.72 3689.27 l
1814.79 3728.68 l
1848.14 3768.06 l
1881.74 3807.41 l
1915.59 3846.74 l
1949.65 3886.04 l
1983.92 3925.3 l
2018.39 3964.53 l
2053.03 4003.73 l
2087.83 4042.9 l
2122.8 4082.03 l
2157.9 4121.13 l
2193.15 4160.2 l
2228.52 4199.24 l
2264 4238.25 l
2299.6 4277.23 l
2335.31 4316.17 l
2371.11 4355.09 l
2407 4393.98 l
2442.98 4432.84 l
2479.05 4471.67 l
2515.18 4510.48 l
2551.4 4549.26 l
2587.68 4588.02 l
2624.02 4626.76 l
2660.43 4665.46 l
2696.89 4704.15 l
2733.41 4742.82 l
2769.98 4781.46 l
2806.6 4820.08 l
2843.26 4858.69 l
2879.97 4897.27 l
2916.73 4935.83 l
2953.52 4974.38 l
2990.35 5012.91 l
3027.22 5051.42 l
3064.12 5089.91 l
3101.06 5128.39 l
3125.7 5154.04 l
3142.13 5171.13 l
3153.09 5182.52 l
3160.4 5190.12 l
3165.27 5195.18 l
3168.52 5198.55 l
3170.69 5200.8 l
3172.13 5202.3 l
3175 5205.32 l
3177.91 5208.3 l
3179.35 5209.8 l
3181.52 5212.05 l
3184.77 5215.43 l
3189.64 5220.49 l
3196.96 5228.08 l
3207.93 5239.47 l
3224.39 5256.54 l
3249.1 5282.16 l
3286.18 5320.56 l
3341.84 5378.14 l
3397.56 5435.7 l
3453.33 5493.23 l
3509.14 5550.73 l
3565 5608.21 l
3620.9 5665.66 l
3676.84 5723.09 l
3732.82 5780.5 l
3788.83 5837.89 l
3844.87 5895.26 l
3900.94 5952.61 l
3957.05 6009.95 l
4013.18 6067.26 l
4069.33 6124.56 l
4125.51 6181.85 l
4181.72 6239.12 l
4220.25 6278.34 l
S
/DeviceGray {} CS
[0] SC
1273.47 3030.37 m
1273.38 3030.14 l
1270.84 3023.84 l
1268.45 3017.6 l
1266.22 3011.44 l
1264.14 3005.36 l
1262.21 2999.34 l
1260.44 2993.4 l
1258.83 2987.54 l
1257.36 2981.74 l
1256.04 2976.02 l
1254.88 2970.38 l
1253.86 2964.81 l
1252.98 2959.31 l
1252.25 2953.89 l
1251.67 2948.55 l
1251.22 2943.27 l
1250.92 2938.08 l
1250.75 2932.95 l
1250.72 2927.9 l
1250.82 2922.93 l
1251.06 2918.02 l
1251.42 2913.19 l
1251.92 2908.44 l
1252.53 2903.75 l
1253.28 2899.14 l
1254.14 2894.6 l
1255.12 2890.14 l
1256.22 2885.74 l
1257.44 2881.42 l
1258.76 2877.17 l
1260.2 2872.98 l
1261.74 2868.87 l
1263.39 2864.83 l
1265.15 2860.86 l
1267 2856.95 l
1268.95 2853.11 l
1270.99 2849.35 l
1273.13 2845.64 l
1275.37 2842.01 l
1277.68 2838.44 l
1280.09 2834.94 l
1285.15 2828.13 l
1290.53 2821.57 l
1296.21 2815.27 l
1302.17 2809.21 l
1308.39 2803.4 l
1314.87 2797.82 l
1321.57 2792.47 l
1328.49 2787.35 l
1335.62 2782.46 l
1342.92 2777.77 l
1350.4 2773.31 l
1358.04 2769.05 l
1365.83 2764.99 l
1373.75 2761.12 l
1381.79 2757.45 l
1389.94 2753.97 l
1398.19 2750.66 l
1406.53 2747.54 l
1414.95 2744.59 l
1423.44 2741.8 l
1432 2739.18 l
1440.6 2736.71 l
1449.26 2734.4 l
1457.96 2732.24 l
1466.68 2730.23 l
1475.44 2728.35 l
1484.22 2726.61 l
1493.01 2725.01 l
1501.81 2723.53 l
1510.62 2722.18 l
1519.42 2720.95 l
1528.23 2719.83 l
1537.02 2718.83 l
1545.81 2717.94 l
1554.58 2717.16 l
1563.33 2716.48 l
1572.06 2715.9 l
1580.77 2715.41 l
1589.45 2715.02 l
1598.1 2714.72 l
1606.72 2714.51 l
1615.32 2714.38 l
1623.87 2714.34 l
1632.39 2714.37 l
1640.87 2714.49 l
1649.32 2714.67 l
1657.72 2714.93 l
1666.09 2715.26 l
1674.41 2715.66 l
1682.69 2716.12 l
1690.92 2716.64 l
1699.11 2717.23 l
1707.26 2717.87 l
1715.35 2718.58 l
1723.41 2719.33 l
1731.41 2720.14 l
1739.37 2721 l
1747.29 2721.91 l
1755.15 2722.87 l
1762.97 2723.88 l
1770.74 2724.93 l
1778.46 2726.02 l
1786.13 2727.16 l
1793.76 2728.33 l
1801.34 2729.55 l
1808.87 2730.8 l
1816.35 2732.09 l
1823.79 2733.42 l
1831.17 2734.78 l
1838.51 2736.17 l
1845.81 2737.59 l
1853.05 2739.05 l
1860.25 2740.53 l
1867.41 2742.04 l
1874.52 2743.58 l
1881.58 2745.15 l
1888.59 2746.74 l
1895.56 2748.36 l
1902.49 2750 l
1909.37 2751.67 l
1916.21 2753.36 l
1923 2755.06 l
1929.75 2756.79 l
1936.46 2758.54 l
1943.12 2760.31 l
1949.74 2762.1 l
1956.32 2763.91 l
1962.86 2765.73 l
1969.35 2767.57 l
1975.81 2769.42 l
1982.22 2771.29 l
1988.59 2773.18 l
1994.93 2775.08 l
2001.22 2777 l
2007.48 2778.92 l
2013.69 2780.86 l
2019.87 2782.82 l
2026.01 2784.78 l
2032.11 2786.76 l
2038.17 2788.75 l
2044.2 2790.74 l
2050.19 2792.75 l
2056.14 2794.77 l
2062.06 2796.8 l
2067.94 2798.83 l
2073.79 2800.88 l
2079.6 2802.93 l
2085.38 2804.99 l
2091.13 2807.06 l
2096.84 2809.13 l
2102.51 2811.22 l
2108.16 2813.3 l
2113.77 2815.4 l
2119.34 2817.5 l
2124.89 2819.61 l
2130.4 2821.72 l
2135.89 2823.84 l
2141.34 2825.96 l
2146.76 2828.09 l
2152.15 2830.22 l
2157.51 2832.36 l
2162.84 2834.5 l
2168.14 2836.64 l
2173.41 2838.79 l
2178.65 2840.94 l
2183.86 2843.1 l
2189.05 2845.26 l
2194.21 2847.42 l
2199.34 2849.58 l
2204.44 2851.75 l
2209.51 2853.91 l
2214.56 2856.09 l
2219.58 2858.26 l
2224.57 2860.43 l
2229.54 2862.61 l
2234.48 2864.79 l
2239.4 2866.96 l
2244.29 2869.14 l
2249.15 2871.33 l
2253.99 2873.51 l
2258.81 2875.69 l
2263.6 2877.88 l
2268.37 2880.06 l
2273.11 2882.25 l
2277.83 2884.43 l
2282.52 2886.62 l
2287.2 2888.8 l
2291.85 2890.99 l
2296.47 2893.18 l
2301.08 2895.36 l
2305.66 2897.55 l
2310.22 2899.73 l
2314.75 2901.92 l
2319.27 2904.1 l
2323.76 2906.29 l
2328.24 2908.47 l
2332.69 2910.66 l
2337.12 2912.84 l
2341.53 2915.02 l
2345.92 2917.2 l
2350.29 2919.38 l
2354.64 2921.56 l
2358.96 2923.74 l
2363.27 2925.91 l
2367.56 2928.09 l
2371.83 2930.26 l
2376.08 2932.44 l
2380.31 2934.61 l
2384.53 2936.78 l
2388.72 2938.95 l
2392.9 2941.11 l
2397.05 2943.28 l
2401.19 2945.44 l
2405.31 2947.6 l
2409.41 2949.76 l
2413.5 2951.92 l
2417.57 2954.08 l
2421.62 2956.23 l
2425.65 2958.39 l
2429.66 2960.54 l
2433.66 2962.69 l
2437.64 2964.83 l
2441.61 2966.98 l
2445.56 2969.12 l
2449.49 2971.26 l
2453.4 2973.4 l
2457.3 2975.54 l
2461.19 2977.67 l
2465.05 2979.8 l
2468.91 2981.93 l
2472.74 2984.06 l
2476.56 2986.19 l
2480.37 2988.31 l
2484.16 2990.43 l
2487.93 2992.55 l
2491.69 2994.66 l
2495.44 2996.78 l
2499.17 2998.89 l
2502.88 3001 l
2506.59 3003.1 l
2510.27 3005.21 l
2513.95 3007.31 l
2517.6 3009.41 l
2521.25 3011.5 l
2524.88 3013.6 l
2528.5 3015.69 l
2532.1 3017.78 l
2535.69 3019.86 l
2539.27 3021.94 l
2542.83 3024.02 l
2546.38 3026.1 l
2549.92 3028.18 l
2553.44 3030.25 l
2556.95 3032.32 l
2560.45 3034.39 l
2563.93 3036.45 l
2567.41 3038.51 l
2570.87 3040.57 l
2574.31 3042.63 l
2577.75 3044.68 l
2581.17 3046.73 l
2584.58 3048.78 l
2587.98 3050.83 l
2591.37 3052.87 l
2594.74 3054.91 l
2598.11 3056.95 l
2601.46 3058.98 l
2604.8 3061.01 l
2608.12 3063.04 l
2611.44 3065.07 l
2614.75 3067.09 l
2618.04 3069.11 l
2621.32 3071.13 l
2624.59 3073.14 l
2627.86 3075.15 l
2631.1 3077.16 l
2634.34 3079.17 l
2637.57 3081.17 l
2640.79 3083.17 l
2643.99 3085.17 l
2647.19 3087.16 l
2650.38 3089.16 l
2653.55 3091.15 l
2656.72 3093.13 l
2659.87 3095.12 l
2663.01 3097.1 l
2666.15 3099.07 l
2669.27 3101.05 l
2672.39 3103.02 l
2675.49 3104.99 l
2678.58 3106.96 l
2681.67 3108.92 l
2684.74 3110.88 l
2687.81 3112.84 l
2690.86 3114.8 l
2693.91 3116.75 l
2696.95 3118.7 l
2699.97 3120.64 l
2702.99 3122.59 l
2706 3124.53 l
2709 3126.47 l
2711.99 3128.4 l
2714.97 3130.34 l
2717.94 3132.27 l
2720.9 3134.19 l
2723.86 3136.12 l
2726.8 3138.04 l
2729.74 3139.96 l
2732.67 3141.87 l
2735.58 3143.79 l
2738.49 3145.7 l
2741.4 3147.6 l
2744.29 3149.51 l
2747.17 3151.41 l
2750.05 3153.31 l
2752.92 3155.21 l
2755.78 3157.1 l
2758.63 3158.99 l
2761.47 3160.88 l
2764.31 3162.76 l
2767.13 3164.65 l
2769.95 3166.53 l
2772.76 3168.4 l
2775.57 3170.28 l
2778.36 3172.15 l
2781.15 3174.02 l
2783.93 3175.89 l
2786.7 3177.75 l
2789.46 3179.61 l
2792.22 3181.47 l
2794.97 3183.32 l
2797.71 3185.18 l
2800.44 3187.03 l
2803.17 3188.87 l
2805.89 3190.72 l
2808.6 3192.56 l
2811.3 3194.4 l
2814 3196.23 l
2816.69 3198.07 l
2819.37 3199.9 l
2822.04 3201.73 l
2824.71 3203.55 l
2827.37 3205.38 l
2830.03 3207.2 l
2832.67 3209.01 l
2835.31 3210.83 l
2837.95 3212.64 l
2840.57 3214.45 l
2843.19 3216.26 l
2845.8 3218.06 l
2848.41 3219.87 l
2851.01 3221.67 l
2853.6 3223.46 l
2856.18 3225.26 l
2858.76 3227.05 l
2861.34 3228.84 l
2863.9 3230.62 l
2866.46 3232.41 l
2869.01 3234.19 l
2871.56 3235.97 l
2874.1 3237.75 l
2876.63 3239.52 l
2879.16 3241.29 l
2881.68 3243.06 l
2884.2 3244.83 l
2886.7 3246.59 l
2889.21 3248.35 l
2891.7 3250.11 l
2894.19 3251.86 l
2896.68 3253.62 l
2899.15 3255.37 l
2901.63 3257.12 l
2904.09 3258.86 l
2906.55 3260.61 l
2909.01 3262.35 l
2911.45 3264.09 l
2913.9 3265.82 l
2916.33 3267.56 l
2918.76 3269.29 l
2921.19 3271.02 l
2923.61 3272.75 l
2926.02 3274.47 l
2928.43 3276.19 l
2930.83 3277.91 l
2933.23 3279.63 l
2935.62 3281.34 l
2938 3283.05 l
2940.38 3284.76 l
2942.76 3286.47 l
2945.12 3288.18 l
2947.49 3289.88 l
2949.85 3291.58 l
2952.2 3293.28 l
2954.54 3294.97 l
2956.89 3296.66 l
2959.22 3298.35 l
2961.55 3300.04 l
2963.88 3301.73 l
2966.2 3303.41 l
2968.52 3305.09 l
2970.83 3306.77 l
2973.13 3308.45 l
2975.43 3310.12 l
2977.73 3311.8 l
2980.02 3313.47 l
2982.3 3315.13 l
2984.58 3316.8 l
2986.86 3318.46 l
2989.13 3320.12 l
2991.39 3321.78 l
2993.65 3323.44 l
2995.91 3325.09 l
2998.16 3326.74 l
3000.4 3328.39 l
3002.64 3330.04 l
3004.88 3331.68 l
3007.11 3333.33 l
3009.34 3334.97 l
3011.56 3336.6 l
3013.77 3338.24 l
3015.98 3339.87 l
3018.19 3341.51 l
3020.39 3343.13 l
3022.59 3344.76 l
3024.79 3346.39 l
3026.98 3348.01 l
3029.16 3349.63 l
3031.34 3351.25 l
3033.51 3352.87 l
3035.68 3354.48 l
3037.85 3356.09 l
3040.01 3357.7 l
3042.17 3359.31 l
3044.32 3360.92 l
3046.47 3362.52 l
3048.62 3364.12 l
3050.76 3365.72 l
3052.89 3367.32 l
3055.02 3368.91 l
3057.15 3370.5 l
3059.27 3372.1 l
3061.39 3373.68 l
3063.5 3375.27 l
3065.61 3376.86 l
3067.72 3378.44 l
3069.82 3380.02 l
3071.92 3381.6 l
3074.01 3383.17 l
3076.1 3384.75 l
3078.18 3386.32 l
3080.27 3387.89 l
3082.34 3389.46 l
3084.41 3391.02 l
3086.48 3392.59 l
3088.55 3394.15 l
3090.61 3395.71 l
3092.66 3397.27 l
3094.72 3398.83 l
3096.77 3400.38 l
3098.81 3401.93 l
3100.85 3403.48 l
3102.89 3405.03 l
3104.92 3406.58 l
3106.95 3408.12 l
3108.98 3409.66 l
3111 3411.2 l
3113.02 3412.74 l
3115.03 3414.28 l
3117.04 3415.81 l
3119.05 3417.34 l
3121.05 3418.87 l
3123.05 3420.4 l
3125.04 3421.93 l
3127.03 3423.45 l
3129.02 3424.98 l
3131 3426.5 l
3132.99 3428.02 l
3134.96 3429.53 l
3136.94 3431.05 l
3138.9 3432.56 l
3140.87 3434.07 l
3142.83 3435.58 l
3144.79 3437.09 l
3146.75 3438.6 l
3148.7 3440.1 l
3150.65 3441.6 l
3152.59 3443.1 l
3154.53 3444.6 l
3156.47 3446.1 l
3158.4 3447.59 l
3160.33 3449.08 l
3162.26 3450.58 l
3164.19 3452.06 l
3166.11 3453.55 l
3168.02 3455.04 l
3169.94 3456.52 l
3171.68 3457.87 l
3172.84 3458.77 l
3173.61 3459.37 l
3174.12 3459.77 l
3174.47 3460.04 l
3174.69 3460.21 l
3174.85 3460.33 l
3174.92 3460.39 l
3175 3460.45 l
3175.07 3460.51 l
3175.15 3460.57 l
3175.27 3460.66 l
3175.44 3460.79 l
3175.78 3461.05 l
3176.29 3461.45 l
3177.06 3462.05 l
3178.21 3462.95 l
3179.94 3464.29 l
3181.84 3465.76 l
3183.72 3467.23 l
3185.61 3468.7 l
3187.49 3470.17 l
3189.37 3471.64 l
3191.25 3473.1 l
3193.12 3474.56 l
3194.99 3476.02 l
3196.86 3477.48 l
3198.72 3478.93 l
3200.58 3480.39 l
3202.44 3481.84 l
3204.3 3483.29 l
3206.15 3484.74 l
3207.99 3486.19 l
3209.84 3487.64 l
3211.68 3489.08 l
3213.52 3490.52 l
3215.35 3491.96 l
3217.19 3493.4 l
3219.02 3494.84 l
3220.84 3496.28 l
3222.67 3497.71 l
3224.49 3499.14 l
3226.3 3500.57 l
3228.12 3502 l
3229.93 3503.43 l
3231.74 3504.86 l
3233.54 3506.28 l
3235.34 3507.7 l
3237.14 3509.12 l
3238.94 3510.54 l
3240.73 3511.96 l
3242.52 3513.38 l
3244.31 3514.79 l
3246.1 3516.2 l
3247.88 3517.61 l
3249.66 3519.02 l
3251.43 3520.43 l
3253.21 3521.84 l
3254.98 3523.24 l
3256.74 3524.64 l
3258.51 3526.04 l
3260.27 3527.44 l
3262.03 3528.84 l
3263.79 3530.24 l
3265.54 3531.63 l
3267.29 3533.03 l
3269.04 3534.42 l
3270.79 3535.81 l
3272.53 3537.2 l
3274.27 3538.58 l
3276.01 3539.97 l
3277.74 3541.35 l
3279.47 3542.73 l
3281.2 3544.11 l
3282.93 3545.49 l
3284.65 3546.87 l
3286.37 3548.25 l
3288.09 3549.62 l
3289.81 3550.99 l
3291.52 3552.37 l
3293.23 3553.74 l
3294.94 3555.1 l
3296.64 3556.47 l
3298.35 3557.84 l
3300.05 3559.2 l
3301.74 3560.56 l
3303.44 3561.92 l
3304.29 3562.6 l
3305.55 3563.62 l
3307.24 3564.98 l
3308.93 3566.33 l
3310.61 3567.69 l
3312.3 3569.04 l
3313.98 3570.39 l
3315.65 3571.74 l
3317.33 3573.09 l
3319 3574.44 l
3320.67 3575.78 l
3322.33 3577.13 l
3324 3578.47 l
3325.66 3579.81 l
3327.32 3581.15 l
3328.98 3582.49 l
3330.63 3583.82 l
3332.28 3585.16 l
3333.93 3586.49 l
3335.58 3587.82 l
3337.22 3589.15 l
3338.87 3590.48 l
3340.51 3591.81 l
3342.14 3593.14 l
3343.78 3594.46 l
3345.41 3595.79 l
3347.04 3597.11 l
3348.67 3598.43 l
3350.3 3599.75 l
3351.92 3601.07 l
3353.54 3602.38 l
3355.16 3603.7 l
3356.78 3605.01 l
3358.39 3606.32 l
3360 3607.64 l
3361.61 3608.95 l
3363.22 3610.25 l
3364.83 3611.56 l
3366.43 3612.87 l
3368.03 3614.17 l
3369.63 3615.47 l
3371.23 3616.77 l
3372.82 3618.07 l
3374.41 3619.37 l
3376 3620.67 l
3377.59 3621.97 l
3379.17 3623.26 l
3380.76 3624.55 l
3382.34 3625.84 l
3383.92 3627.13 l
3385.49 3628.42 l
3387.07 3629.71 l
3388.64 3631 l
3390.21 3632.28 l
3391.78 3633.57 l
3393.34 3634.85 l
3394.9 3636.13 l
3396.47 3637.41 l
3398.03 3638.69 l
3399.58 3639.97 l
3401.14 3641.24 l
3402.69 3642.52 l
3404.24 3643.79 l
3405.79 3645.06 l
3407.34 3646.33 l
3408.88 3647.6 l
3410.42 3648.87 l
3411.96 3650.14 l
3413.5 3651.4 l
3415.04 3652.67 l
3416.57 3653.93 l
3418.1 3655.19 l
3419.64 3656.45 l
3421.16 3657.71 l
3422.69 3658.97 l
3424.21 3660.22 l
3425.74 3661.48 l
3427.26 3662.73 l
3428.77 3663.99 l
3430.29 3665.24 l
3431.8 3666.49 l
3433.32 3667.74 l
3434.83 3668.98 l
3436.33 3670.23 l
3437.84 3671.48 l
3439.34 3672.72 l
3440.85 3673.96 l
3442.35 3675.2 l
3443.85 3676.44 l
3445.34 3677.68 l
3446.84 3678.92 l
3448.33 3680.16 l
3449.82 3681.39 l
3451.31 3682.63 l
3452.8 3683.86 l
3454.28 3685.09 l
3455.76 3686.32 l
3457.25 3687.55 l
3458.72 3688.78 l
3460.2 3690.01 l
3461.68 3691.23 l
3463.15 3692.46 l
3464.62 3693.68 l
3466.09 3694.9 l
3467.56 3696.12 l
3469.03 3697.34 l
3470.49 3698.56 l
3471.96 3699.78 l
3473.42 3700.99 l
3474.88 3702.21 l
3476.33 3703.42 l
3477.79 3704.64 l
3479.24 3705.85 l
3480.69 3707.06 l
3482.14 3708.27 l
3483.59 3709.47 l
3485.04 3710.68 l
3486.48 3711.89 l
3487.93 3713.09 l
3489.37 3714.29 l
3490.81 3715.5 l
3492.24 3716.7 l
3493.68 3717.9 l
3495.11 3719.1 l
3496.55 3720.29 l
3497.98 3721.49 l
3499.4 3722.69 l
3500.83 3723.88 l
3502.26 3725.07 l
3503.68 3726.26 l
3505.1 3727.46 l
3506.52 3728.65 l
3507.94 3729.83 l
3509.36 3731.02 l
3510.77 3732.21 l
3512.19 3733.39 l
3513.6 3734.58 l
3515.01 3735.76 l
3516.42 3736.94 l
3517.82 3738.12 l
3519.23 3739.3 l
3520.63 3740.48 l
3522.03 3741.66 l
3523.43 3742.83 l
3524.83 3744.01 l
3526.23 3745.18 l
3527.62 3746.36 l
3529.02 3747.53 l
3530.41 3748.7 l
3531.8 3749.87 l
3533.19 3751.04 l
3534.57 3752.21 l
3535.96 3753.37 l
3537.34 3754.54 l
3538.72 3755.7 l
3540.1 3756.87 l
3541.48 3758.03 l
3542.86 3759.19 l
3544.24 3760.35 l
3545.61 3761.51 l
3546.98 3762.67 l
3548.35 3763.83 l
3549.72 3764.98 l
3551.09 3766.14 l
3552.46 3767.29 l
3553.82 3768.44 l
3555.18 3769.59 l
3556.55 3770.75 l
3557.91 3771.9 l
3559.26 3773.04 l
3560.62 3774.19 l
3561.98 3775.34 l
3563.33 3776.48 l
3564.68 3777.63 l
3566.03 3778.77 l
3567.38 3779.91 l
3568.73 3781.06 l
3570.08 3782.2 l
3571.42 3783.34 l
3572.76 3784.47 l
3574.11 3785.61 l
3575.45 3786.75 l
3576.78 3787.88 l
3578.12 3789.02 l
3579.46 3790.15 l
3580.79 3791.28 l
3582.12 3792.42 l
3583.46 3793.55 l
3584.78 3794.67 l
3586.11 3795.8 l
3587.44 3796.93 l
3588.77 3798.06 l
3589.43 3798.62 l
3590.42 3799.46 l
3591.41 3800.31 l
3592.4 3801.15 l
3593.72 3802.27 l
3595.04 3803.39 l
3596.36 3804.51 l
3597.67 3805.63 l
3598.99 3806.75 l
3600.3 3807.87 l
3601.61 3808.99 l
3602.92 3810.1 l
3604.23 3811.22 l
3605.54 3812.33 l
3606.84 3813.45 l
3608.15 3814.56 l
3609.45 3815.67 l
3610.75 3816.78 l
3612.05 3817.89 l
3612.7 3818.44 l
3613.67 3819.27 l
3614.97 3820.38 l
3616.27 3821.49 l
3617.56 3822.59 l
3618.85 3823.69 l
3620.14 3824.8 l
3621.43 3825.9 l
3622.72 3827 l
3624.01 3828.1 l
3625.3 3829.2 l
3626.58 3830.3 l
3627.86 3831.4 l
3629.15 3832.49 l
3630.43 3833.59 l
3631.71 3834.68 l
3632.98 3835.78 l
3634.26 3836.87 l
3635.53 3837.96 l
3636.81 3839.05 l
3638.08 3840.14 l
3639.35 3841.23 l
3640.62 3842.32 l
3641.89 3843.41 l
3643.16 3844.49 l
3644.42 3845.58 l
3645.69 3846.66 l
3646.32 3847.21 l
3647.27 3848.02 l
3648.53 3849.1 l
3649.79 3850.18 l
3651.05 3851.26 l
3652.3 3852.34 l
3653.56 3853.42 l
3654.82 3854.5 l
3656.07 3855.58 l
3657.32 3856.65 l
3658.57 3857.73 l
3659.82 3858.8 l
3661.07 3859.88 l
3662.32 3860.95 l
3663.57 3862.02 l
3664.81 3863.09 l
3666.05 3864.16 l
3667.3 3865.23 l
3668.54 3866.3 l
3669.78 3867.37 l
3671.02 3868.43 l
3672.25 3869.5 l
3673.49 3870.56 l
3674.72 3871.63 l
3675.96 3872.69 l
3677.19 3873.75 l
3678.42 3874.81 l
3679.65 3875.87 l
3680.88 3876.93 l
3682.11 3877.99 l
3683.33 3879.05 l
3684.56 3880.11 l
3685.78 3881.16 l
3687 3882.22 l
3688.23 3883.27 l
3689.45 3884.33 l
3690.66 3885.38 l
3691.88 3886.43 l
3693.1 3887.48 l
3694.31 3888.53 l
3695.53 3889.58 l
3696.74 3890.63 l
3697.95 3891.68 l
3699.16 3892.72 l
3700.37 3893.77 l
3701.58 3894.81 l
3702.79 3895.86 l
3703.39 3896.38 l
3703.99 3896.9 l
3704.9 3897.68 l
3705.8 3898.47 l
3707 3899.51 l
3708.21 3900.55 l
3709.41 3901.59 l
3710.61 3902.63 l
3711.8 3903.66 l
3713 3904.7 l
3714.2 3905.74 l
3715.39 3906.77 l
3716.59 3907.81 l
3717.78 3908.84 l
3718.97 3909.87 l
3720.16 3910.91 l
3721.35 3911.94 l
3722.54 3912.97 l
3723.72 3914 l
3724.91 3915.03 l
3726.09 3916.06 l
3727.28 3917.08 l
3728.46 3918.11 l
3729.64 3919.14 l
3730.82 3920.16 l
3732 3921.18 l
3733.18 3922.21 l
3734.35 3923.23 l
3735.53 3924.25 l
3736.7 3925.27 l
3737.88 3926.29 l
3739.05 3927.31 l
3740.22 3928.33 l
3741.39 3929.35 l
3742.56 3930.37 l
3743.73 3931.38 l
3744.9 3932.4 l
3746.06 3933.41 l
3747.23 3934.43 l
3748.39 3935.44 l
3749.55 3936.45 l
3750.71 3937.46 l
3751.87 3938.48 l
3753.03 3939.48 l
3754.19 3940.49 l
3755.35 3941.5 l
3756.5 3942.51 l
3757.66 3943.52 l
3758.81 3944.52 l
3759.97 3945.53 l
3761.12 3946.53 l
3762.27 3947.54 l
3763.42 3948.54 l
3764.57 3949.54 l
3765.72 3950.54 l
3766.86 3951.55 l
3768.01 3952.55 l
3769.15 3953.54 l
3770.3 3954.54 l
3771.44 3955.54 l
3772.58 3956.54 l
3773.72 3957.53 l
3774.86 3958.53 l
3776 3959.53 l
3777.13 3960.52 l
3778.27 3961.51 l
3779.41 3962.5 l
3780.54 3963.5 l
3781.67 3964.49 l
3782.81 3965.48 l
3783.94 3966.47 l
3785.07 3967.46 l
3786.2 3968.44 l
3787.32 3969.43 l
3788.45 3970.42 l
3789.01 3970.91 l
3789.86 3971.65 l
3790.7 3972.39 l
3791.83 3973.37 l
3792.95 3974.36 l
3794.07 3975.34 l
3795.19 3976.32 l
3796.31 3977.31 l
3797.43 3978.29 l
3798.55 3979.27 l
3799.67 3980.25 l
3800.78 3981.22 l
3801.9 3982.2 l
3803.01 3983.18 l
3804.13 3984.16 l
3805.24 3985.13 l
3806.35 3986.11 l
3807.46 3987.08 l
3808.57 3988.05 l
3809.68 3989.03 l
3810.78 3990 l
3811.89 3990.97 l
3813 3991.94 l
3814.1 3992.91 l
3815.2 3993.88 l
3816.31 3994.85 l
3817.41 3995.82 l
3818.51 3996.79 l
3819.61 3997.75 l
3820.71 3998.72 l
3821.81 3999.68 l
3822.9 4000.65 l
3824 4001.61 l
3825.09 4002.57 l
3826.19 4003.54 l
3827.28 4004.5 l
3828.37 4005.46 l
3829.46 4006.42 l
3830.55 4007.38 l
3831.64 4008.34 l
3832.73 4009.3 l
3833.82 4010.25 l
3834.91 4011.21 l
3835.99 4012.17 l
3837.08 4013.12 l
3838.16 4014.08 l
3839.24 4015.03 l
3840.33 4015.99 l
3841.41 4016.94 l
3842.49 4017.89 l
3843.57 4018.84 l
3844.65 4019.79 l
3845.72 4020.74 l
3846.8 4021.69 l
3847.88 4022.64 l
3848.95 4023.59 l
3850.02 4024.54 l
3851.1 4025.48 l
3852.17 4026.43 l
3853.24 4027.38 l
3854.31 4028.32 l
3855.38 4029.26 l
3856.45 4030.21 l
3857.52 4031.15 l
3858.58 4032.09 l
3859.65 4033.03 l
3860.71 4033.97 l
3861.78 4034.91 l
3862.84 4035.85 l
3863.9 4036.79 l
3864.96 4037.73 l
3866.03 4038.67 l
3866.56 4039.14 l
3867.35 4039.84 l
3867.75 4040.19 l
3868.14 4040.54 l
3868.54 4040.89 l
3868.94 4041.24 l
3869.73 4041.95 l
3870.52 4042.65 l
3871.58 4043.58 l
3872.63 4044.51 l
3873.69 4045.45 l
3874.74 4046.38 l
3875.79 4047.31 l
3876.85 4048.24 l
3877.9 4049.17 l
3878.95 4050.1 l
3880 4051.03 l
3880.52 4051.49 l
3880.78 4051.73 l
3881.18 4052.07 l
3881.77 4052.6 l
3882.81 4053.52 l
3883.86 4054.45 l
3884.9 4055.38 l
3885.95 4056.3 l
3886.99 4057.23 l
3888.03 4058.15 l
3889.08 4059.07 l
3890.12 4060 l
3891.16 4060.92 l
3892.2 4061.84 l
3893.23 4062.76 l
3894.27 4063.68 l
3895.31 4064.6 l
3896.34 4065.52 l
3897.38 4066.44 l
3898.41 4067.36 l
3898.93 4067.81 l
3899.71 4068.5 l
3900.48 4069.19 l
3901.51 4070.11 l
3902.54 4071.02 l
3903.57 4071.94 l
3904.6 4072.85 l
3905.63 4073.76 l
3906.66 4074.68 l
3907.69 4075.59 l
3908.71 4076.5 l
3909.74 4077.41 l
3910.76 4078.32 l
3911.28 4078.78 l
3912.04 4079.46 l
3913.07 4080.37 l
3914.09 4081.28 l
3915.11 4082.18 l
3916.13 4083.09 l
3917.15 4084 l
3918.17 4084.9 l
3918.68 4085.36 l
3919.44 4086.04 l
3920.2 4086.71 l
3921.22 4087.62 l
3922.23 4088.52 l
3923.25 4089.42 l
3924.26 4090.33 l
3925.28 4091.23 l
3926.29 4092.13 l
3927.3 4093.03 l
3927.81 4093.48 l
3928.56 4094.16 l
3929.57 4095.05 l
3930.58 4095.95 l
3931.59 4096.85 l
3932.6 4097.75 l
3933.61 4098.65 l
3934.61 4099.54 l
3935.62 4100.44 l
3936.62 4101.33 l
3937.63 4102.23 l
3938.63 4103.12 l
3939.63 4104.02 l
3940.63 4104.91 l
3941.63 4105.8 l
3942.63 4106.69 l
3943.63 4107.58 l
3944.63 4108.47 l
3945.63 4109.36 l
3946.62 4110.25 l
3947.62 4111.14 l
3948.62 4112.03 l
3949.61 4112.92 l
3950.6 4113.8 l
3951.6 4114.69 l
3952.59 4115.58 l
3953.58 4116.46 l
3954.57 4117.35 l
3955.56 4118.23 l
3956.55 4119.11 l
3957.54 4120 l
3958.53 4120.88 l
3959.52 4121.76 l
3960.5 4122.64 l
3961.49 4123.52 l
3961.98 4123.96 l
3962.47 4124.4 l
3963.46 4125.28 l
3964.44 4126.16 l
3965.42 4127.04 l
3966.4 4127.92 l
3967.39 4128.8 l
3968.37 4129.67 l
3969.35 4130.55 l
3970.33 4131.43 l
3971.3 4132.3 l
3972.28 4133.17 l
3973.26 4134.05 l
3974.23 4134.92 l
3975.21 4135.8 l
3976.18 4136.67 l
3976.67 4137.1 l
3977.04 4137.43 l
3977.77 4138.08 l
3978.74 4138.95 l
3979.71 4139.83 l
3980.68 4140.7 l
3981.17 4141.13 l
3981.53 4141.46 l
3982.26 4142.11 l
3982.99 4142.76 l
3983.96 4143.63 l
3984.92 4144.49 l
3985.89 4145.36 l
3986.86 4146.23 l
3987.83 4147.09 l
3988.79 4147.96 l
3989.76 4148.82 l
3990.24 4149.26 l
3990.96 4149.9 l
3991.44 4150.33 l
3992.16 4150.98 l
3993.13 4151.85 l
3994.09 4152.71 l
3995.05 4153.57 l
3995.53 4154 l
3996.49 4154.86 l
3996.97 4155.29 l
3997.21 4155.51 l
3997.57 4155.83 l
3998.29 4156.47 l
3999.25 4157.33 l
4000.2 4158.19 l
4001.16 4159.05 l
4002.12 4159.91 l
4003.07 4160.77 l
4003.55 4161.19 l
4003.79 4161.41 l
4004.02 4161.62 l
4004.38 4161.94 l
4004.92 4162.42 l
4005.46 4162.91 l
4005.86 4163.27 l
4006.26 4163.63 l
4006.66 4163.99 l
4007.26 4164.53 l
4008.17 4165.34 l
4009.12 4166.19 l
4010.07 4167.05 l
4011.02 4167.9 l
4011.97 4168.75 l
4012.44 4169.18 l
4012.68 4169.39 l
4013.15 4169.82 l
4013.63 4170.24 l
4014.34 4170.88 l
4015.05 4171.52 l
4015.4 4171.84 l
4015.76 4172.16 l
4016.11 4172.48 l
4016.46 4172.79 l
4017.17 4173.43 l
4017.88 4174.07 l
4018.83 4174.92 l
4019.77 4175.76 l
4020.71 4176.61 l
4021.65 4177.46 l
4022.59 4178.31 l
4023.54 4179.15 l
4024.48 4180 l
4025.41 4180.84 l
4026.35 4181.69 l
4027.29 4182.53 l
4028.23 4183.37 l
4028.7 4183.79 l
4029.4 4184.43 l
4030.34 4185.27 l
4030.8 4185.69 l
4031.74 4186.53 l
4032.67 4187.37 l
4033.61 4188.21 l
4034.54 4189.05 l
4035.47 4189.89 l
4036.4 4190.73 l
4037.33 4191.57 l
4037.8 4191.99 l
4038.73 4192.83 l
4039.66 4193.66 l
4040.59 4194.5 l
4041.51 4195.34 l
4042.44 4196.17 l
4042.91 4196.59 l
4043.37 4197.01 l
4043.83 4197.42 l
4044.53 4198.05 l
4045.22 4198.68 l
4046.15 4199.51 l
4047.07 4200.34 l
4047.99 4201.17 l
4048.92 4202.01 l
4049.84 4202.84 l
4050.76 4203.67 l
4051.68 4204.5 l
4052.14 4204.92 l
4052.6 4205.33 l
4053.29 4205.95 l
4054.21 4206.78 l
4055.13 4207.61 l
4056.05 4208.44 l
4056.97 4209.27 l
4057.88 4210.09 l
4058.8 4210.92 l
4059.71 4211.75 l
4060.63 4212.57 l
4061.54 4213.4 l
4062.46 4214.22 l
4062.92 4214.64 l
4063.6 4215.25 l
4064.28 4215.87 l
4064.63 4216.18 l
4064.97 4216.49 l
4065.48 4216.95 l
4065.99 4217.42 l
4066.9 4218.24 l
4067.81 4219.06 l
4068.27 4219.47 l
4068.72 4219.88 l
4069.41 4220.5 l
4070.09 4221.11 l
4071 4221.93 l
4071.9 4222.75 l
4072.81 4223.57 l
4073.72 4224.39 l
4074.62 4225.21 l
4075.07 4225.62 l
4075.53 4226.03 l
4076.2 4226.64 l
4077.11 4227.46 l
4078.01 4228.28 l
4078.91 4229.09 l
4079.82 4229.91 l
4080.72 4230.72 l
4081.62 4231.54 l
4082.52 4232.35 l
4083.42 4233.17 l
4084.32 4233.98 l
4085.22 4234.79 l
4086.11 4235.6 l
4086.56 4236.01 l
4087.01 4236.42 l
4087.46 4236.82 l
4088.13 4237.43 l
4088.47 4237.74 l
4088.97 4238.19 l
4089.73 4238.88 l
4090.48 4239.56 l
4091.24 4240.24 l
4092.13 4241.05 l
4093.03 4241.86 l
4093.92 4242.67 l
4094.36 4243.07 l
4095.26 4243.88 l
4096.15 4244.69 l
4097.04 4245.49 l
4097.93 4246.3 l
4098.82 4247.11 l
4099.71 4247.91 l
4100.6 4248.72 l
4101.04 4249.12 l
4101.93 4249.92 l
4102.81 4250.73 l
4103.7 4251.53 l
4104.59 4252.33 l
4105.47 4253.14 l
4106.36 4253.94 l
4107.24 4254.74 l
4108.12 4255.54 l
4109.01 4256.34 l
4109.89 4257.14 l
4110.77 4257.94 l
4111.65 4258.74 l
4112.53 4259.54 l
4113.41 4260.34 l
4114.29 4261.13 l
4114.73 4261.53 l
4115.17 4261.93 l
4115.83 4262.53 l
4116.49 4263.13 l
4117.15 4263.72 l
4117.81 4264.32 l
4118.68 4265.12 l
4119.56 4265.91 l
4120.43 4266.71 l
4120.87 4267.1 l
4121.75 4267.9 l
4122.62 4268.69 l
4123.49 4269.48 l
4124.37 4270.28 l
4125.24 4271.07 l
4126.11 4271.86 l
4126.98 4272.65 l
4127.85 4273.44 l
4128.73 4274.23 l
4129.6 4275.02 l
4130.46 4275.81 l
4131.33 4276.6 l
4132.2 4277.39 l
4133.07 4278.18 l
4133.94 4278.97 l
4134.8 4279.76 l
4135.67 4280.54 l
4136.53 4281.33 l
4137.4 4282.12 l
4138.26 4282.9 l
4138.48 4283.1 l
4138.91 4283.49 l
4139.56 4284.08 l
4140.21 4284.67 l
4141.07 4285.45 l
4141.93 4286.24 l
4142.36 4286.63 l
4143.01 4287.21 l
4143.65 4287.8 l
4144.3 4288.39 l
4144.62 4288.68 l
4144.94 4288.98 l
4145.59 4289.56 l
4146.23 4290.15 l
4146.88 4290.73 l
4147.73 4291.52 l
4148.59 4292.3 l
4149.45 4293.08 l
4150.31 4293.86 l
4151.16 4294.64 l
4152.02 4295.41 l
4152.87 4296.19 l
4153.73 4296.97 l
4154.58 4297.75 l
4155.44 4298.52 l
4156.29 4299.3 l
4157.14 4300.08 l
4157.99 4300.85 l
4158.85 4301.63 l
4159.7 4302.4 l
4160.55 4303.18 l
4161.4 4303.95 l
4162.25 4304.73 l
4163.1 4305.5 l
4163.52 4305.89 l
4163.94 4306.27 l
4164.15 4306.47 l
4164.58 4306.85 l
4165.21 4307.43 l
4165.53 4307.72 l
4166.01 4308.15 l
4166.48 4308.59 l
4167.2 4309.24 l
4168.05 4310.01 l
4168.26 4310.2 l
4168.68 4310.59 l
4169.1 4310.97 l
4169.31 4311.17 l
4169.74 4311.55 l
4170.37 4312.13 l
4171.21 4312.9 l
4172.06 4313.67 l
4172.9 4314.44 l
4173.74 4315.2 l
4174.58 4315.97 l
4175 4316.35 l
4175.63 4316.93 l
4175.95 4317.22 l
4176.58 4317.79 l
4177.21 4318.37 l
4178.05 4319.13 l
4178.89 4319.9 l
4179.73 4320.66 l
4180.57 4321.43 l
4181.4 4322.19 l
4182.24 4322.96 l
4182.66 4323.34 l
4183.08 4323.72 l
4183.5 4324.1 l
4183.71 4324.29 l
4184.12 4324.67 l
4184.75 4325.25 l
4185.59 4326.01 l
4186.42 4326.77 l
4187.25 4327.53 l
4188.09 4328.29 l
4188.5 4328.67 l
4189.34 4329.43 l
4190.17 4330.19 l
4191 4330.95 l
4191.42 4331.33 l
4191.83 4331.71 l
4192.46 4332.28 l
4193.08 4332.85 l
4193.91 4333.61 l
4194.74 4334.37 l
4195.57 4335.12 l
4196.4 4335.88 l
4197.23 4336.64 l
4198.05 4337.4 l
4198.47 4337.77 l
4199.09 4338.34 l
4199.71 4338.91 l
4200.53 4339.66 l
4201.36 4340.42 l
4202.19 4341.17 l
4203.01 4341.92 l
4203.22 4342.11 l
4203.27 4342.16 l
4203.37 4342.25 l
4203.58 4342.44 l
4203.99 4342.82 l
4204.4 4343.2 l
4205.22 4343.95 l
4206.05 4344.7 l
4206.87 4345.45 l
4207.69 4346.2 l
4208.51 4346.96 l
4209.33 4347.71 l
4210.16 4348.46 l
4210.36 4348.65 l
4210.57 4348.83 l
4210.77 4349.02 l
4210.98 4349.21 l
4211.38 4349.58 l
4212.2 4350.33 l
4213.02 4351.08 l
4213.84 4351.83 l
4214.66 4352.58 l
4215.07 4352.95 l
4215.89 4353.7 l
4216.7 4354.45 l
4217.52 4355.19 l
4218.33 4355.94 l
4219.15 4356.69 l
4219.97 4357.43 l
4220.25 4357.69 l
S
/DeviceRGB {} CS
[1 0.6465 0] SC
1517.1 3355.39 m
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.68 l
1502.47 3322.67 l
1502.47 3322.67 l
1502.47 3322.67 l
1502.47 3322.67 l
1502.46 3322.67 l
1502.46 3322.67 l
1502.46 3322.67 l
1502.46 3322.67 l
1502.46 3322.66 l
1502.46 3322.66 l
1502.46 3322.65 l
1502.46 3322.65 l
1502.45 3322.65 l
1502.45 3322.64 l
1502.45 3322.64 l
1502.45 3322.63 l
1502.45 3322.63 l
1502.44 3322.63 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.62 l
1502.44 3322.61 l
1502.44 3322.61 l
1502.43 3322.6 l
1502.43 3322.6 l
1502.43 3322.6 l
1502.43 3322.6 l
1502.43 3322.59 l
1502.43 3322.59 l
1502.43 3322.59 l
1502.43 3322.58 l
1502.42 3322.58 l
1502.42 3322.58 l
1502.42 3322.58 l
1502.42 3322.58 l
1502.42 3322.57 l
1502.42 3322.57 l
1502.42 3322.57 l
1502.42 3322.57 l
1502.42 3322.56 l
1502.41 3322.56 l
1502.41 3322.55 l
1502.41 3322.55 l
1502.41 3322.54 l
1502.4 3322.53 l
1502.4 3322.52 l
1502.4 3322.52 l
1502.39 3322.51 l
1502.39 3322.51 l
1502.39 3322.5 l
1502.39 3322.5 l
1502.38 3322.49 l
1502.38 3322.48 l
1502.37 3322.47 l
1502.37 3322.45 l
1502.36 3322.44 l
1502.36 3322.43 l
1502.35 3322.41 l
1502.34 3322.4 l
1502.34 3322.39 l
1502.34 3322.38 l
1502.33 3322.37 l
1502.32 3322.35 l
1502.32 3322.34 l
1502.31 3322.32 l
1502.3 3322.31 l
1502.3 3322.3 l
1502.29 3322.29 l
1502.29 3322.27 l
1502.28 3322.26 l
1502.28 3322.25 l
1502.27 3322.24 l
1502.27 3322.23 l
1502.26 3322.22 l
1502.26 3322.21 l
1502.25 3322.2 l
1502.25 3322.18 l
1502.24 3322.17 l
1502.24 3322.16 l
1502.23 3322.15 l
1502.23 3322.14 l
1502.22 3322.13 l
1502.22 3322.13 l
1502.22 3322.12 l
1502.22 3322.12 l
1502.22 3322.11 l
1502.21 3322.11 l
1502.21 3322.11 l
1502.21 3322.1 l
1502.21 3322.09 l
1502.2 3322.09 l
1502.2 3322.08 l
1502.2 3322.07 l
1502.2 3322.07 l
1502.19 3322.07 l
1502.19 3322.06 l
1502.19 3322.06 l
1502.19 3322.05 l
1502.18 3322.04 l
1502.18 3322.04 l
1502.18 3322.03 l
1502.18 3322.03 l
1502.18 3322.02 l
1502.17 3322.02 l
1502.17 3322.01 l
1502.17 3322.01 l
1502.17 3322 l
1502.16 3322 l
1502.16 3321.99 l
1502.16 3321.99 l
1502.15 3321.98 l
1502.15 3321.97 l
1502.15 3321.96 l
1502.14 3321.95 l
1502.14 3321.94 l
1502.13 3321.92 l
1502.12 3321.9 l
1502.12 3321.89 l
1502.11 3321.87 l
1502.1 3321.86 l
1502.1 3321.85 l
1502.09 3321.82 l
1502.08 3321.81 l
1502.07 3321.79 l
1502.07 3321.79 l
1502.06 3321.78 l
1502.06 3321.77 l
1502.06 3321.76 l
1502.06 3321.76 l
1502.06 3321.76 l
1502.05 3321.74 l
1502.05 3321.73 l
1502.04 3321.72 l
1502.04 3321.71 l
1502.03 3321.7 l
1502.03 3321.69 l
1502.02 3321.67 l
1502.01 3321.65 l
1502 3321.63 l
1501.99 3321.61 l
1501.99 3321.6 l
1501.98 3321.59 l
1501.97 3321.57 l
1501.96 3321.55 l
1501.96 3321.53 l
1501.95 3321.51 l
1501.94 3321.5 l
1501.94 3321.49 l
1501.93 3321.48 l
1501.92 3321.45 l
1501.91 3321.43 l
1501.9 3321.4 l
1501.89 3321.39 l
1501.89 3321.38 l
1501.88 3321.36 l
1501.88 3321.35 l
1501.87 3321.33 l
1501.86 3321.31 l
1501.85 3321.3 l
1501.84 3321.28 l
1501.84 3321.26 l
1501.83 3321.25 l
1501.83 3321.24 l
1501.82 3321.23 l
1501.82 3321.22 l
1501.81 3321.21 l
1501.8 3321.19 l
1501.8 3321.18 l
1501.79 3321.16 l
1501.78 3321.15 l
1501.77 3321.12 l
1501.76 3321.1 l
1501.75 3321.08 l
1501.74 3321.06 l
1501.73 3321.03 l
1501.72 3321.01 l
1501.71 3320.99 l
1501.71 3320.97 l
1501.7 3320.96 l
1501.69 3320.94 l
1501.68 3320.92 l
1501.67 3320.9 l
1501.67 3320.88 l
1501.66 3320.87 l
1501.65 3320.85 l
1501.64 3320.83 l
1501.64 3320.82 l
1501.62 3320.79 l
1501.61 3320.77 l
1501.6 3320.74 l
1501.6 3320.73 l
1501.59 3320.71 l
1501.58 3320.69 l
1501.57 3320.68 l
1501.57 3320.66 l
1501.56 3320.65 l
1501.55 3320.63 l
1501.54 3320.61 l
1501.53 3320.59 l
1501.52 3320.56 l
1501.51 3320.54 l
1501.5 3320.52 l
1501.49 3320.5 l
1501.48 3320.48 l
1501.47 3320.46 l
1501.46 3320.43 l
1501.45 3320.41 l
1501.45 3320.4 l
1501.44 3320.37 l
1501.42 3320.34 l
1501.41 3320.31 l
1501.4 3320.29 l
1501.39 3320.27 l
1501.38 3320.25 l
1501.38 3320.24 l
1501.37 3320.23 l
1501.37 3320.22 l
1501.37 3320.22 l
1501.37 3320.21 l
1501.36 3320.2 l
1501.35 3320.19 l
1501.35 3320.18 l
1501.34 3320.15 l
1501.33 3320.13 l
1501.31 3320.1 l
1501.3 3320.07 l
1501.29 3320.04 l
1501.28 3320.02 l
1501.27 3319.99 l
1501.26 3319.97 l
1501.25 3319.95 l
1501.24 3319.93 l
1501.23 3319.91 l
1501.22 3319.9 l
1501.22 3319.88 l
1501.21 3319.86 l
1501.2 3319.85 l
1501.2 3319.84 l
1501.2 3319.84 l
1501.18 3319.81 l
1501.17 3319.78 l
1501.16 3319.75 l
1501.15 3319.72 l
1501.14 3319.7 l
1501.13 3319.69 l
1501.12 3319.66 l
1501.11 3319.64 l
1501.1 3319.61 l
1501.09 3319.59 l
1501.07 3319.56 l
1501.06 3319.53 l
1501.05 3319.51 l
1501.04 3319.48 l
1501.03 3319.46 l
1501.02 3319.45 l
1501.01 3319.41 l
1500.99 3319.38 l
1500.98 3319.34 l
1500.96 3319.31 l
1500.95 3319.27 l
1500.93 3319.24 l
1500.91 3319.2 l
1500.9 3319.17 l
1500.88 3319.13 l
1500.87 3319.11 l
1500.86 3319.09 l
1500.85 3319.06 l
1500.84 3319.04 l
1500.83 3319.03 l
1500.82 3318.99 l
1500.81 3318.96 l
1500.79 3318.93 l
1500.78 3318.9 l
1500.77 3318.88 l
1500.76 3318.86 l
1500.75 3318.84 l
1500.73 3318.8 l
1500.71 3318.76 l
1500.7 3318.71 l
1500.68 3318.69 l
1500.67 3318.66 l
1500.66 3318.64 l
1500.65 3318.62 l
1500.65 3318.6 l
1500.63 3318.56 l
1500.62 3318.54 l
1500.61 3318.52 l
1500.6 3318.5 l
1500.59 3318.49 l
1500.59 3318.48 l
1500.58 3318.45 l
1500.56 3318.42 l
1500.55 3318.39 l
1500.54 3318.37 l
1500.53 3318.35 l
1500.52 3318.33 l
1500.51 3318.29 l
1500.49 3318.25 l
1500.47 3318.21 l
1500.45 3318.17 l
1500.44 3318.14 l
1500.42 3318.1 l
1500.4 3318.06 l
1500.38 3318.02 l
1500.37 3317.98 l
1500.35 3317.94 l
1500.33 3317.9 l
1500.31 3317.86 l
1500.29 3317.82 l
1500.28 3317.78 l
1500.26 3317.74 l
1500.24 3317.7 l
1500.22 3317.66 l
1500.21 3317.62 l
1500.19 3317.58 l
1500.17 3317.54 l
1500.15 3317.5 l
1500.14 3317.47 l
1500.13 3317.44 l
1500.12 3317.42 l
1500.1 3317.39 l
1500.08 3317.34 l
1500.06 3317.28 l
1500.03 3317.23 l
1500.01 3317.18 l
1499.98 3317.12 l
1499.96 3317.07 l
1499.94 3317.02 l
1499.92 3316.98 l
1499.91 3316.95 l
1499.9 3316.93 l
1499.88 3316.88 l
1499.86 3316.84 l
1499.84 3316.8 l
1499.83 3316.77 l
1499.81 3316.74 l
1499.8 3316.71 l
1499.77 3316.64 l
1499.74 3316.58 l
1499.71 3316.51 l
1499.68 3316.45 l
1499.65 3316.38 l
1499.62 3316.32 l
1499.6 3316.25 l
1499.57 3316.19 l
1499.54 3316.12 l
1499.51 3316.06 l
1499.48 3315.99 l
1499.45 3315.93 l
1499.42 3315.86 l
1499.39 3315.8 l
1499.36 3315.73 l
1499.33 3315.67 l
1499.3 3315.6 l
1499.27 3315.53 l
1499.24 3315.47 l
1499.21 3315.4 l
1499.18 3315.34 l
1499.16 3315.27 l
1499.13 3315.2 l
1499.1 3315.14 l
1499.07 3315.07 l
1499.04 3315 l
1499.01 3314.94 l
1498.98 3314.87 l
1498.96 3314.83 l
1498.94 3314.78 l
1498.92 3314.74 l
1498.9 3314.69 l
1498.88 3314.65 l
1498.86 3314.6 l
1498.84 3314.56 l
1498.82 3314.51 l
1498.8 3314.47 l
1498.78 3314.44 l
1498.77 3314.41 l
1498.76 3314.38 l
1498.73 3314.32 l
1498.7 3314.26 l
1498.68 3314.2 l
1498.65 3314.14 l
1498.62 3314.08 l
1498.6 3314.02 l
1498.57 3313.96 l
1498.54 3313.9 l
1498.52 3313.84 l
1498.5 3313.8 l
1498.48 3313.77 l
1498.46 3313.72 l
1498.44 3313.66 l
1498.41 3313.61 l
1498.39 3313.55 l
1498.36 3313.5 l
1498.32 3313.39 l
1498.27 3313.28 l
1498.22 3313.18 l
1498.17 3313.07 l
1498.12 3312.96 l
1498.07 3312.85 l
1498.02 3312.74 l
1497.97 3312.63 l
1497.92 3312.52 l
1497.88 3312.41 l
1497.83 3312.3 l
1497.78 3312.19 l
1497.73 3312.07 l
1497.68 3311.96 l
1497.63 3311.85 l
1497.58 3311.74 l
1497.53 3311.63 l
1497.48 3311.52 l
1497.43 3311.4 l
1497.38 3311.29 l
1497.33 3311.18 l
1497.27 3311.06 l
1497.22 3310.95 l
1497.17 3310.84 l
1497.12 3310.72 l
1497.07 3310.61 l
1497.02 3310.49 l
1496.97 3310.38 l
1496.92 3310.26 l
1496.87 3310.15 l
1496.81 3310.03 l
1496.76 3309.92 l
1496.71 3309.8 l
1496.66 3309.69 l
1496.62 3309.61 l
1496.6 3309.56 l
1496.56 3309.45 l
1496.51 3309.35 l
1496.48 3309.28 l
1496.45 3309.21 l
1496.42 3309.14 l
1496.38 3309.07 l
1496.32 3308.93 l
1496.2 3308.65 l
1496.07 3308.37 l
1495.95 3308.09 l
1495.82 3307.81 l
1495.69 3307.52 l
1495.56 3307.23 l
1495.43 3306.95 l
1495.31 3306.66 l
1495.18 3306.37 l
1495.05 3306.07 l
1494.91 3305.78 l
1494.78 3305.48 l
1494.65 3305.19 l
1494.52 3304.89 l
1494.38 3304.59 l
1494.25 3304.29 l
1494.11 3303.98 l
1493.98 3303.68 l
1493.84 3303.38 l
1493.7 3303.07 l
1493.57 3302.76 l
1493.43 3302.45 l
1493.29 3302.14 l
1493.15 3301.82 l
1493.01 3301.51 l
1492.87 3301.19 l
1492.73 3300.88 l
1492.59 3300.56 l
1492.44 3300.24 l
1492.3 3299.91 l
1492.16 3299.59 l
1492.01 3299.26 l
1491.87 3298.94 l
1491.72 3298.61 l
1491.57 3298.28 l
1491.43 3297.95 l
1491.28 3297.61 l
1491.13 3297.28 l
1490.98 3296.94 l
1490.83 3296.6 l
1490.68 3296.26 l
1490.53 3295.92 l
1490.38 3295.58 l
1490.23 3295.24 l
1490.07 3294.89 l
1489.92 3294.54 l
1489.77 3294.19 l
1489.61 3293.84 l
1489.46 3293.49 l
1489.3 3293.14 l
1489.14 3292.78 l
1488.99 3292.43 l
1488.83 3292.07 l
1488.67 3291.71 l
1488.51 3291.34 l
1488.35 3290.98 l
1488.19 3290.62 l
1487.87 3289.88 l
1487.22 3288.4 l
1486.57 3286.88 l
1485.91 3285.35 l
1485.24 3283.79 l
1484.57 3282.21 l
1483.89 3280.62 l
1483.22 3279 l
1481.87 3275.71 l
1480.54 3272.36 l
1479.25 3268.98 l
1478.03 3265.59 l
1476.89 3262.21 l
1475.89 3258.87 l
1475.05 3255.63 l
1474.42 3252.51 l
1474.06 3249.57 l
1474.01 3246.86 l
1474.35 3244.44 l
1475.12 3242.36 l
1476.4 3240.7 l
1478.22 3239.5 l
1480.63 3238.8 l
1483.66 3238.64 l
1487.32 3239.03 l
1491.59 3239.97 l
1496.45 3241.45 l
1501.87 3243.42 l
1507.81 3245.86 l
1514.24 3248.73 l
1521.1 3252 l
1528.38 3255.62 l
1536.02 3259.57 l
1544.01 3263.82 l
1552.32 3268.34 l
1560.93 3273.11 l
1569.81 3278.11 l
1578.94 3283.32 l
1588.32 3288.74 l
1597.92 3294.34 l
1607.74 3300.11 l
1617.75 3306.05 l
1627.96 3312.15 l
1638.35 3318.4 l
1648.92 3324.79 l
1659.64 3331.32 l
1670.52 3337.98 l
1681.56 3344.77 l
1692.73 3351.68 l
1704.04 3358.7 l
1715.48 3365.84 l
1727.04 3373.09 l
1738.72 3380.45 l
1750.51 3387.92 l
1762.42 3395.48 l
1774.42 3403.15 l
1786.53 3410.91 l
1798.73 3418.77 l
1811.02 3426.72 l
1823.4 3434.75 l
1835.87 3442.88 l
1848.41 3451.1 l
1861.03 3459.39 l
1873.73 3467.78 l
1886.49 3476.24 l
1899.33 3484.78 l
1912.23 3493.4 l
1925.19 3502.1 l
1938.21 3510.87 l
1951.28 3519.71 l
1964.42 3528.63 l
1977.6 3537.62 l
1990.84 3546.67 l
2004.12 3555.8 l
2017.45 3564.99 l
2030.83 3574.25 l
2044.24 3583.57 l
2057.7 3592.96 l
2071.2 3602.41 l
2084.73 3611.92 l
2098.3 3621.49 l
2111.91 3631.12 l
2125.55 3640.81 l
2139.22 3650.56 l
2152.92 3660.36 l
2166.65 3670.22 l
2180.4 3680.13 l
2194.19 3690.1 l
2208 3700.12 l
2221.83 3710.19 l
2235.69 3720.31 l
2249.57 3730.48 l
2263.47 3740.71 l
2277.39 3750.98 l
2291.34 3761.3 l
2305.3 3771.66 l
2319.28 3782.08 l
2333.27 3792.53 l
2347.29 3803.04 l
2361.32 3813.59 l
2375.36 3824.18 l
2389.42 3834.81 l
2403.5 3845.49 l
2417.59 3856.21 l
2431.69 3866.97 l
2445.8 3877.77 l
2459.92 3888.61 l
2474.06 3899.49 l
2488.21 3910.41 l
2502.36 3921.36 l
2516.53 3932.36 l
2530.71 3943.39 l
2544.89 3954.46 l
2559.09 3965.56 l
2573.29 3976.7 l
2587.5 3987.87 l
2601.72 3999.08 l
2615.94 4010.32 l
2630.17 4021.6 l
2644.41 4032.91 l
2658.66 4044.25 l
2672.91 4055.62 l
2687.16 4067.02 l
2701.43 4078.46 l
2715.69 4089.93 l
2729.97 4101.42 l
2744.24 4112.95 l
2758.52 4124.51 l
2772.81 4136.09 l
2787.1 4147.7 l
2801.39 4159.35 l
2815.69 4171.02 l
2829.99 4182.71 l
2844.29 4194.44 l
2858.6 4206.19 l
2872.91 4217.97 l
2887.22 4229.77 l
2901.54 4241.6 l
2915.85 4253.46 l
2930.17 4265.34 l
2944.5 4277.24 l
2958.82 4289.17 l
2973.15 4301.12 l
2987.48 4313.1 l
3001.81 4325.1 l
3016.14 4337.13 l
3030.47 4349.17 l
3044.81 4361.24 l
3059.14 4373.33 l
3073.48 4385.45 l
3087.82 4397.58 l
3102.16 4409.74 l
3116.5 4421.92 l
3130.84 4434.12 l
3145.19 4446.34 l
3156.08 4455.63 l
3163.34 4461.83 l
3168.18 4465.97 l
3171.41 4468.73 l
3173.56 4470.57 l
3175 4471.79 l
3176.43 4473.02 l
3178.59 4474.86 l
3181.81 4477.63 l
3186.65 4481.77 l
3193.92 4487.99 l
3204.81 4497.34 l
3219.16 4509.66 l
3233.51 4522 l
3247.86 4534.36 l
3262.21 4546.74 l
3276.56 4559.14 l
3290.91 4571.56 l
3305.26 4583.99 l
3319.61 4596.44 l
3333.96 4608.91 l
3348.31 4621.4 l
3362.66 4633.9 l
3377.01 4646.42 l
3391.37 4658.96 l
3405.72 4671.52 l
3420.07 4684.09 l
3434.42 4696.67 l
3448.78 4709.28 l
3463.13 4721.9 l
3477.48 4734.53 l
3491.84 4747.18 l
3506.19 4759.85 l
3520.54 4772.53 l
3534.9 4785.22 l
3549.25 4797.94 l
3563.6 4810.66 l
3577.95 4823.4 l
3592.31 4836.16 l
3606.66 4848.92 l
3621.01 4861.71 l
3635.37 4874.5 l
3649.72 4887.31 l
3664.07 4900.14 l
3678.42 4912.97 l
3692.78 4925.82 l
3707.13 4938.69 l
3721.48 4951.57 l
3735.84 4964.46 l
3750.19 4977.36 l
3764.54 4990.27 l
3778.89 5003.2 l
3793.24 5016.14 l
3807.6 5029.09 l
3821.95 5042.06 l
3836.3 5055.03 l
3850.65 5068.02 l
3865 5081.02 l
3879.36 5094.03 l
3893.71 5107.05 l
3908.06 5120.09 l
3922.41 5133.13 l
3936.76 5146.19 l
3951.11 5159.26 l
3965.46 5172.34 l
3979.81 5185.43 l
3994.17 5198.53 l
4008.52 5211.64 l
4022.87 5224.76 l
4037.22 5237.89 l
4051.57 5251.03 l
4065.92 5264.18 l
4080.27 5277.34 l
4094.62 5290.52 l
4108.97 5303.7 l
4123.32 5316.89 l
4137.68 5330.09 l
4152.03 5343.3 l
4166.38 5356.52 l
4180.73 5369.75 l
4195.08 5382.99 l
4209.43 5396.24 l
4220.25 5406.24 l
S
/DeviceRGB {} CS
[0.8516 0.5527 0] SC
1517.1 3355.39 m
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.46 l
1477 3248.45 l
1477 3248.45 l
1477 3248.45 l
1477 3248.45 l
1477 3248.45 l
1477 3248.45 l
1477 3248.45 l
1477 3248.45 l
1477 3248.45 l
1477.01 3248.45 l
1477.01 3248.44 l
1477.01 3248.44 l
1477.02 3248.43 l
1477.02 3248.43 l
1477.02 3248.42 l
1477.03 3248.42 l
1477.03 3248.42 l
1477.03 3248.41 l
1477.03 3248.41 l
1477.03 3248.4 l
1477.04 3248.4 l
1477.04 3248.4 l
1477.04 3248.4 l
1477.04 3248.39 l
1477.05 3248.39 l
1477.05 3248.38 l
1477.06 3248.37 l
1477.07 3248.36 l
1477.07 3248.35 l
1477.08 3248.34 l
1477.08 3248.34 l
1477.08 3248.33 l
1477.09 3248.33 l
1477.09 3248.33 l
1477.1 3248.31 l
1477.1 3248.31 l
1477.11 3248.3 l
1477.11 3248.29 l
1477.11 3248.29 l
1477.12 3248.29 l
1477.12 3248.29 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.12 3248.28 l
1477.13 3248.28 l
1477.13 3248.28 l
1477.13 3248.27 l
1477.13 3248.27 l
1477.13 3248.27 l
1477.14 3248.26 l
1477.15 3248.25 l
1477.15 3248.24 l
1477.16 3248.23 l
1477.16 3248.22 l
1477.17 3248.22 l
1477.18 3248.21 l
1477.18 3248.2 l
1477.19 3248.2 l
1477.19 3248.19 l
1477.19 3248.19 l
1477.19 3248.19 l
1477.2 3248.18 l
1477.2 3248.18 l
1477.2 3248.18 l
1477.2 3248.18 l
1477.2 3248.17 l
1477.21 3248.17 l
1477.21 3248.17 l
1477.21 3248.16 l
1477.22 3248.15 l
1477.22 3248.15 l
1477.23 3248.14 l
1477.23 3248.14 l
1477.23 3248.13 l
1477.24 3248.13 l
1477.24 3248.13 l
1477.24 3248.12 l
1477.25 3248.12 l
1477.25 3248.11 l
1477.25 3248.11 l
1477.26 3248.11 l
1477.26 3248.1 l
1477.29 3248.07 l
1477.32 3248.03 l
1477.34 3248.01 l
1477.35 3247.99 l
1477.37 3247.97 l
1477.38 3247.95 l
1477.42 3247.91 l
1477.45 3247.88 l
1477.47 3247.86 l
1477.49 3247.84 l
1477.51 3247.82 l
1477.52 3247.81 l
1477.53 3247.8 l
1477.53 3247.79 l
1477.54 3247.78 l
1477.55 3247.77 l
1477.55 3247.77 l
1477.55 3247.77 l
1477.56 3247.76 l
1477.56 3247.76 l
1477.56 3247.76 l
1477.57 3247.76 l
1477.57 3247.75 l
1477.58 3247.74 l
1477.59 3247.73 l
1477.61 3247.71 l
1477.63 3247.69 l
1477.64 3247.68 l
1477.67 3247.66 l
1477.72 3247.61 l
1477.75 3247.58 l
1477.78 3247.55 l
1477.79 3247.54 l
1477.8 3247.53 l
1477.82 3247.51 l
1477.84 3247.5 l
1477.86 3247.48 l
1477.87 3247.47 l
1477.89 3247.45 l
1477.91 3247.44 l
1477.92 3247.43 l
1477.94 3247.41 l
1477.95 3247.4 l
1477.97 3247.39 l
1477.98 3247.38 l
1478 3247.36 l
1478.02 3247.35 l
1478.03 3247.34 l
1478.05 3247.33 l
1478.06 3247.31 l
1478.08 3247.3 l
1478.12 3247.27 l
1478.16 3247.24 l
1478.2 3247.21 l
1478.22 3247.2 l
1478.24 3247.18 l
1478.28 3247.16 l
1478.3 3247.14 l
1478.32 3247.13 l
1478.33 3247.12 l
1478.35 3247.11 l
1478.36 3247.1 l
1478.37 3247.09 l
1478.4 3247.08 l
1478.42 3247.06 l
1478.43 3247.06 l
1478.45 3247.05 l
1478.46 3247.04 l
1478.47 3247.03 l
1478.48 3247.02 l
1478.5 3247.01 l
1478.52 3247 l
1478.54 3246.99 l
1478.57 3246.98 l
1478.59 3246.96 l
1478.64 3246.93 l
1478.67 3246.92 l
1478.7 3246.9 l
1478.72 3246.89 l
1478.74 3246.88 l
1478.79 3246.85 l
1478.85 3246.82 l
1478.89 3246.8 l
1478.92 3246.79 l
1478.97 3246.76 l
1479.01 3246.74 l
1479.04 3246.73 l
1479.07 3246.72 l
1479.09 3246.71 l
1479.12 3246.69 l
1479.13 3246.69 l
1479.15 3246.68 l
1479.18 3246.67 l
1479.25 3246.64 l
1479.32 3246.61 l
1479.38 3246.59 l
1479.43 3246.57 l
1479.48 3246.55 l
1479.52 3246.53 l
1479.57 3246.52 l
1479.66 3246.49 l
1479.73 3246.47 l
1479.86 3246.43 l
1479.99 3246.39 l
1480.12 3246.36 l
1480.26 3246.32 l
1480.35 3246.3 l
1480.45 3246.28 l
1480.54 3246.27 l
1480.64 3246.25 l
1480.73 3246.23 l
1480.8 3246.22 l
1480.93 3246.2 l
1481.07 3246.18 l
1481.2 3246.17 l
1481.34 3246.15 l
1481.43 3246.15 l
1481.53 3246.14 l
1481.62 3246.13 l
1481.69 3246.13 l
1481.73 3246.13 l
1481.77 3246.12 l
1481.82 3246.12 l
1481.9 3246.12 l
1481.99 3246.12 l
1482.08 3246.11 l
1482.17 3246.11 l
1482.26 3246.11 l
1482.44 3246.11 l
1482.5 3246.11 l
1482.59 3246.11 l
1482.78 3246.12 l
1482.97 3246.13 l
1483.16 3246.14 l
1483.36 3246.15 l
1483.56 3246.16 l
1483.76 3246.18 l
1483.97 3246.2 l
1484.25 3246.24 l
1484.53 3246.28 l
1484.82 3246.32 l
1485.12 3246.37 l
1485.42 3246.42 l
1485.73 3246.48 l
1486.04 3246.54 l
1486.36 3246.61 l
1486.68 3246.68 l
1487.01 3246.76 l
1487.23 3246.82 l
1487.45 3246.87 l
1487.68 3246.93 l
1487.91 3246.99 l
1488.14 3247.06 l
1488.38 3247.12 l
1488.61 3247.19 l
1488.85 3247.26 l
1489.09 3247.34 l
1489.34 3247.41 l
1489.58 3247.49 l
1489.83 3247.57 l
1490.08 3247.65 l
1490.34 3247.74 l
1490.59 3247.83 l
1490.85 3247.92 l
1491.11 3248.01 l
1491.38 3248.1 l
1491.64 3248.2 l
1492.18 3248.4 l
1492.73 3248.6 l
1493.86 3249.05 l
1495.02 3249.53 l
1496.22 3250.04 l
1498.73 3251.17 l
1501.39 3252.44 l
1504.18 3253.84 l
1507.1 3255.37 l
1510.16 3257.03 l
1516.62 3260.68 l
1523.54 3264.75 l
1530.85 3269.21 l
1538.54 3274.02 l
1546.56 3279.14 l
1554.88 3284.55 l
1563.5 3290.22 l
1572.37 3296.13 l
1581.49 3302.25 l
1590.84 3308.58 l
1600.41 3315.11 l
1610.17 3321.8 l
1620.13 3328.67 l
1630.26 3335.69 l
1640.57 3342.86 l
1651.04 3350.16 l
1661.66 3357.61 l
1672.43 3365.17 l
1683.33 3372.87 l
1694.37 3380.67 l
1705.54 3388.59 l
1716.83 3396.62 l
1728.24 3404.75 l
1739.75 3412.99 l
1751.37 3421.32 l
1763.1 3429.74 l
1774.92 3438.26 l
1786.84 3446.86 l
1798.84 3455.56 l
1810.94 3464.33 l
1823.11 3473.19 l
1835.36 3482.12 l
1847.69 3491.14 l
1860.09 3500.22 l
1872.56 3509.38 l
1885.1 3518.62 l
1897.71 3527.92 l
1910.37 3537.29 l
1923.09 3546.73 l
1935.87 3556.23 l
1948.71 3565.8 l
1961.6 3575.43 l
1974.54 3585.12 l
1987.52 3594.87 l
2000.56 3604.68 l
2013.63 3614.54 l
2026.76 3624.46 l
2039.92 3634.44 l
2053.12 3644.47 l
2066.36 3654.55 l
2079.64 3664.69 l
2092.95 3674.87 l
2106.29 3685.1 l
2119.67 3695.39 l
2133.08 3705.72 l
2146.52 3716.1 l
2159.99 3726.52 l
2173.49 3736.99 l
2187.01 3747.51 l
2200.56 3758.06 l
2214.13 3768.66 l
2227.73 3779.3 l
2241.35 3789.99 l
2255 3800.71 l
2268.66 3811.48 l
2282.35 3822.28 l
2296.05 3833.12 l
2309.77 3844 l
2323.52 3854.92 l
2337.28 3865.87 l
2351.05 3876.86 l
2364.84 3887.88 l
2378.65 3898.94 l
2392.48 3910.04 l
2406.32 3921.16 l
2420.17 3932.32 l
2434.03 3943.52 l
2447.91 3954.74 l
2461.8 3966 l
2475.71 3977.29 l
2489.62 3988.61 l
2503.55 3999.95 l
2517.49 4011.33 l
2531.43 4022.74 l
2545.39 4034.18 l
2559.36 4045.64 l
2573.33 4057.13 l
2587.32 4068.65 l
2601.31 4080.2 l
2615.32 4091.77 l
2629.33 4103.37 l
2643.35 4115 l
2657.37 4126.65 l
2671.41 4138.32 l
2685.45 4150.02 l
2699.49 4161.75 l
2713.55 4173.5 l
2727.61 4185.27 l
2741.67 4197.07 l
2755.74 4208.89 l
2769.82 4220.73 l
2783.9 4232.6 l
2797.99 4244.48 l
2812.09 4256.39 l
2826.18 4268.32 l
2840.29 4280.27 l
2854.39 4292.25 l
2868.51 4304.24 l
2882.62 4316.25 l
2896.74 4328.29 l
2910.87 4340.34 l
2924.99 4352.42 l
2939.13 4364.51 l
2953.26 4376.62 l
2967.4 4388.75 l
2981.54 4400.9 l
2995.69 4413.07 l
3009.84 4425.25 l
3023.99 4437.46 l
3038.14 4449.68 l
3052.3 4461.92 l
3063.05 4471.22 l
3073.81 4480.54 l
3084.56 4489.87 l
3095.32 4499.2 l
3106.08 4508.55 l
3116.84 4517.9 l
3127.6 4527.26 l
3138.36 4536.64 l
3149.12 4546.02 l
3156.3 4552.28 l
3163.48 4558.54 l
3168.26 4562.72 l
3171.45 4565.51 l
3173.58 4567.36 l
3175 4568.6 l
3176.42 4569.84 l
3178.54 4571.7 l
3181.73 4574.49 l
3186.52 4578.67 l
3193.7 4584.96 l
3200.88 4591.24 l
3208.06 4597.53 l
3215.24 4603.82 l
3222.42 4610.12 l
3229.61 4616.42 l
3236.79 4622.72 l
3243.97 4629.03 l
3251.15 4635.34 l
3258.34 4641.66 l
3265.52 4647.98 l
3276.3 4657.46 l
3287.08 4666.95 l
3297.86 4676.46 l
3312.05 4688.98 l
3326.25 4701.52 l
3340.45 4714.07 l
3354.65 4726.64 l
3368.86 4739.22 l
3383.06 4751.81 l
3397.27 4764.42 l
3411.47 4777.04 l
3425.68 4789.67 l
3439.89 4802.32 l
3454.1 4814.98 l
3468.31 4827.65 l
3482.53 4840.33 l
3496.74 4853.02 l
3510.96 4865.73 l
3525.17 4878.45 l
3539.39 4891.18 l
3553.61 4903.92 l
3567.83 4916.68 l
3582.05 4929.44 l
3596.27 4942.22 l
3610.5 4955.01 l
3624.72 4967.81 l
3638.95 4980.62 l
3653.17 4993.44 l
3667.4 5006.28 l
3681.63 5019.12 l
3695.85 5031.97 l
3710.08 5044.84 l
3724.31 5057.71 l
3738.55 5070.6 l
3752.78 5083.49 l
3767.01 5096.4 l
3781.25 5109.32 l
3795.48 5122.24 l
3809.72 5135.18 l
3823.95 5148.12 l
3838.19 5161.08 l
3852.43 5174.04 l
3866.67 5187.02 l
3880.91 5200 l
3895.15 5212.99 l
3909.39 5225.99 l
3923.63 5239.01 l
3937.87 5252.03 l
3952.12 5265.06 l
3966.36 5278.09 l
3980.61 5291.14 l
3994.85 5304.2 l
4009.1 5317.26 l
4023.34 5330.34 l
4037.59 5343.42 l
4051.84 5356.51 l
4066.09 5369.61 l
4080.34 5382.71 l
4094.59 5395.83 l
4108.84 5408.95 l
4123.09 5422.09 l
4137.35 5435.23 l
4151.6 5448.37 l
4165.86 5461.53 l
4180.11 5474.69 l
4194.37 5487.86 l
4208.62 5501.04 l
4220.25 5511.8 l
S
/DeviceRGB {} CS
[0.7695 0.5019 0] SC
1493.74 3250.28 m
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.28 l
1493.74 3250.29 l
1493.75 3250.29 l
1493.75 3250.29 l
1493.76 3250.29 l
1493.76 3250.29 l
1493.76 3250.29 l
1493.77 3250.3 l
1493.78 3250.3 l
1493.78 3250.3 l
1493.79 3250.3 l
1493.79 3250.31 l
1493.8 3250.31 l
1493.8 3250.31 l
1493.81 3250.31 l
1493.81 3250.31 l
1493.82 3250.32 l
1493.82 3250.32 l
1493.82 3250.32 l
1493.83 3250.32 l
1493.84 3250.33 l
1493.85 3250.33 l
1493.86 3250.33 l
1493.87 3250.34 l
1493.88 3250.34 l
1493.89 3250.34 l
1493.89 3250.35 l
1493.9 3250.35 l
1493.91 3250.35 l
1493.93 3250.36 l
1493.96 3250.38 l
1493.98 3250.39 l
1494.01 3250.4 l
1494.03 3250.41 l
1494.06 3250.42 l
1494.08 3250.43 l
1494.1 3250.44 l
1494.15 3250.46 l
1494.2 3250.48 l
1494.23 3250.49 l
1494.37 3250.55 l
1494.5 3250.6 l
1494.63 3250.66 l
1494.76 3250.72 l
1494.89 3250.78 l
1495.16 3250.89 l
1495.43 3251.01 l
1495.7 3251.13 l
1495.88 3251.21 l
1496 3251.27 l
1496.25 3251.38 l
1496.49 3251.49 l
1496.74 3251.61 l
1496.99 3251.72 l
1497.24 3251.84 l
1497.49 3251.95 l
1497.74 3252.07 l
1497.91 3252.15 l
1498.03 3252.21 l
1498.14 3252.26 l
1498.26 3252.32 l
1498.49 3252.43 l
1498.72 3252.54 l
1498.95 3252.65 l
1499.18 3252.76 l
1499.41 3252.88 l
1499.57 3252.95 l
1499.73 3253.03 l
1499.88 3253.11 l
1500.2 3253.27 l
1500.41 3253.37 l
1500.63 3253.48 l
1500.84 3253.59 l
1501.06 3253.7 l
1501.27 3253.81 l
1501.49 3253.92 l
1501.63 3253.99 l
1501.78 3254.06 l
1501.92 3254.14 l
1502.22 3254.29 l
1502.51 3254.44 l
1502.81 3254.6 l
1503.4 3254.91 l
1504 3255.22 l
1504.61 3255.55 l
1505.23 3255.88 l
1505.85 3256.21 l
1506.27 3256.44 l
1506.69 3256.67 l
1507.11 3256.9 l
1507.53 3257.14 l
1507.96 3257.37 l
1508.39 3257.61 l
1508.82 3257.85 l
1509.7 3258.35 l
1510.58 3258.85 l
1511.47 3259.36 l
1512.37 3259.88 l
1513.29 3260.41 l
1514.21 3260.95 l
1515.14 3261.49 l
1517.03 3262.62 l
1518.95 3263.78 l
1520.91 3264.97 l
1522.91 3266.19 l
1531.22 3271.41 l
1540.01 3277.08 l
1549.23 3283.17 l
1558.83 3289.62 l
1568.79 3296.39 l
1579.08 3303.47 l
1589.66 3310.81 l
1600.52 3318.41 l
1611.64 3326.24 l
1623 3334.28 l
1634.59 3342.51 l
1646.39 3350.94 l
1658.39 3359.54 l
1670.58 3368.31 l
1682.96 3377.24 l
1695.5 3386.32 l
1708.2 3395.54 l
1721.06 3404.9 l
1734.06 3414.39 l
1747.21 3424 l
1760.48 3433.74 l
1773.88 3443.6 l
1787.4 3453.57 l
1801.04 3463.65 l
1814.78 3473.83 l
1828.63 3484.12 l
1842.58 3494.5 l
1856.62 3504.99 l
1870.76 3515.56 l
1884.98 3526.23 l
1899.28 3536.98 l
1913.66 3547.82 l
1928.12 3558.75 l
1942.65 3569.75 l
1957.25 3580.84 l
1971.91 3592 l
1986.64 3603.24 l
2001.43 3614.55 l
2016.27 3625.93 l
2031.17 3637.39 l
2046.13 3648.91 l
2061.13 3660.5 l
2076.18 3672.15 l
2091.28 3683.87 l
2106.42 3695.65 l
2121.61 3707.49 l
2136.83 3719.39 l
2152.1 3731.35 l
2167.4 3743.36 l
2182.74 3755.43 l
2198.11 3767.56 l
2213.51 3779.74 l
2228.95 3791.97 l
2244.41 3804.26 l
2259.91 3816.59 l
2275.43 3828.98 l
2290.98 3841.41 l
2306.55 3853.89 l
2322.15 3866.41 l
2337.78 3878.99 l
2353.42 3891.6 l
2369.09 3904.26 l
2384.78 3916.97 l
2400.48 3929.72 l
2416.21 3942.5 l
2431.95 3955.33 l
2447.72 3968.2 l
2463.5 3981.11 l
2479.29 3994.05 l
2495.1 4007.04 l
2510.93 4020.06 l
2526.77 4033.12 l
2542.63 4046.21 l
2558.49 4059.34 l
2574.37 4072.51 l
2590.27 4085.71 l
2606.17 4098.94 l
2622.09 4112.2 l
2638.02 4125.5 l
2653.95 4138.83 l
2669.9 4152.19 l
2685.86 4165.58 l
2701.83 4179 l
2717.8 4192.45 l
2733.79 4205.93 l
2749.78 4219.44 l
2765.78 4232.98 l
2781.79 4246.55 l
2797.81 4260.14 l
2813.83 4273.76 l
2829.86 4287.41 l
2845.9 4301.08 l
2861.94 4314.78 l
2877.99 4328.51 l
2894.05 4342.26 l
2910.11 4356.04 l
2926.18 4369.83 l
2942.25 4383.66 l
2958.33 4397.51 l
2974.41 4411.38 l
2990.5 4425.27 l
3006.59 4439.19 l
3022.69 4453.12 l
3038.79 4467.08 l
3054.9 4481.07 l
3071.01 4495.07 l
3087.12 4509.1 l
3103.24 4523.14 l
3113.98 4532.52 l
3124.73 4541.9 l
3131.9 4548.16 l
3139.07 4554.43 l
3143.84 4558.61 l
3148.62 4562.79 l
3153.4 4566.97 l
3156.59 4569.76 l
3159.77 4572.55 l
3162.96 4575.34 l
3165.08 4577.2 l
3167.21 4579.06 l
3169.33 4580.92 l
3170.75 4582.16 l
3172.17 4583.4 l
3173.58 4584.65 l
3175 4585.89 l
3176.42 4587.13 l
3177.83 4588.37 l
3179.25 4589.61 l
3180.66 4590.86 l
3182.79 4592.72 l
3184.91 4594.58 l
3187.04 4596.45 l
3189.16 4598.31 l
3191.29 4600.18 l
3194.48 4602.98 l
3199.26 4607.18 l
3204.04 4611.38 l
3208.82 4615.58 l
3213.61 4619.78 l
3220.78 4626.09 l
3227.96 4632.4 l
3235.13 4638.72 l
3245.9 4648.2 l
3256.66 4657.69 l
3267.43 4667.18 l
3283.58 4681.44 l
3299.73 4695.72 l
3315.89 4710.02 l
3332.05 4724.33 l
3348.21 4738.66 l
3364.38 4753.01 l
3380.54 4767.37 l
3396.71 4781.75 l
3412.88 4796.15 l
3429.06 4810.56 l
3445.23 4824.98 l
3461.41 4839.43 l
3477.59 4853.89 l
3493.77 4868.36 l
3509.95 4882.85 l
3526.13 4897.35 l
3542.32 4911.87 l
3558.5 4926.41 l
3574.69 4940.95 l
3590.88 4955.52 l
3607.08 4970.09 l
3623.27 4984.68 l
3639.46 4999.29 l
3655.66 5013.9 l
3671.86 5028.54 l
3688.06 5043.18 l
3704.26 5057.84 l
3720.46 5072.51 l
3736.67 5087.19 l
3752.87 5101.89 l
3769.08 5116.6 l
3785.28 5131.32 l
3801.49 5146.05 l
3817.7 5160.8 l
3833.91 5175.55 l
3850.12 5190.32 l
3866.34 5205.11 l
3882.55 5219.9 l
3898.77 5234.71 l
3914.98 5249.52 l
3931.2 5264.35 l
3947.42 5279.19 l
3963.64 5294.04 l
3979.86 5308.9 l
3996.08 5323.78 l
4012.31 5338.66 l
4028.53 5353.55 l
4044.76 5368.46 l
4060.98 5383.37 l
4077.21 5398.3 l
4093.44 5413.24 l
4109.67 5428.18 l
4125.9 5443.14 l
4142.13 5458.11 l
4158.36 5473.08 l
4174.6 5488.07 l
4190.83 5503.07 l
4207.07 5518.07 l
4220.25 5530.27 l
S
/DeviceRGB {} CS
[0.5879 0 0.5879] SC
1314.03 3074.28 m
1314.06 3074.32 l
1327.38 3093.11 l
1342.44 3114.44 l
1359.18 3138.15 l
1377.5 3164.02 l
1397.32 3191.85 l
1418.52 3221.42 l
1440.99 3252.54 l
1464.7 3285.09 l
1489.61 3318.99 l
1489.62 3319.01 l
1502.21 3336.02 l
1514.26 3352.22 l
1526.26 3368.3 l
1538.95 3385.27 l
1539.04 3385.39 l
1566.22 3421.44 l
1593.91 3457.84 l
1622.07 3494.56 l
1679.8 3568.91 l
1739.09 3644.14 l
1739.17 3644.24 l
1799.82 3720.16 l
1861.55 3796.5 l
1861.58 3796.53 l
1924.25 3873.19 l
1949.25 3903.54 l
2012.99 3980.46 l
2013 3980.48 l
2077.4 4057.52 l
2136.56 4127.79 l
2196.14 4198.1 l
2256.08 4268.44 l
2316.35 4338.78 l
2376.91 4409.12 l
2437.74 4479.46 l
2498.81 4549.79 l
2560.1 4620.11 l
2621.59 4690.41 l
2683.27 4760.69 l
2745.12 4830.96 l
2807.12 4901.2 l
2869.27 4971.43 l
2869.27 4971.43 l
2900.4 5006.53 l
2931.56 5041.64 l
2962.75 5076.73 l
2993.97 5111.82 l
3025.22 5146.91 l
3056.5 5181.99 l
3087.81 5217.07 l
3119.14 5252.14 l
3140.05 5275.52 l
3153.99 5291.1 l
3163.29 5301.49 l
3169.49 5308.42 l
3173.62 5313.04 l
3173.62 5313.04 l
3175 5314.58 l
3176.38 5316.11 l
3176.38 5316.11 l
3180.51 5320.73 l
3186.71 5327.66 l
3196.02 5338.04 l
3209.98 5353.63 l
3230.93 5377 l
3251.89 5400.36 l
3283.35 5435.41 l
3314.84 5470.45 l
3346.34 5505.49 l
3377.87 5540.53 l
3409.41 5575.56 l
3440.98 5610.58 l
3450.05 5620.65 l
3497.44 5673.17 l
3544.88 5725.69 l
3592.35 5778.2 l
3639.86 5830.7 l
3687.41 5883.19 l
3735 5935.67 l
3782.62 5988.15 l
3830.27 6040.61 l
3877.95 6093.07 l
3925.67 6145.51 l
3973.41 6197.95 l
4021.18 6250.38 l
4068.99 6302.8 l
4087.19 6322.75 l
S
4166.51 6322.75 m
4163.51 6319.53 l
4153.18 6308.44 l
4142.84 6297.34 l
4132.51 6286.24 l
4122.18 6275.14 l
4111.84 6264.04 l
4101.51 6252.95 l
4091.18 6241.85 l
4080.85 6230.75 l
4070.52 6219.65 l
4060.17 6208.53 l
4049.81 6197.4 l
4039.48 6186.3 l
4029.15 6175.2 l
4018.83 6164.1 l
4008.5 6153 l
3998.18 6141.9 l
3987.86 6130.8 l
3977.53 6119.71 l
3967.21 6108.61 l
3956.89 6097.51 l
3946.57 6086.41 l
3936.25 6075.31 l
3925.93 6064.21 l
3915.61 6053.11 l
3905.3 6042.01 l
3894.98 6030.92 l
3884.66 6019.82 l
3874.35 6008.72 l
3864.04 5997.62 l
3853.72 5986.52 l
3843.41 5975.42 l
3833.1 5964.32 l
3822.78 5953.22 l
3812.47 5942.12 l
3802.17 5931.02 l
3791.86 5919.92 l
3781.55 5908.82 l
3771.24 5897.72 l
3760.94 5886.62 l
3750.64 5875.52 l
3740.33 5864.42 l
3730.03 5853.32 l
3719.73 5842.22 l
3712.86 5834.82 l
3705.99 5827.42 l
3699.13 5820.02 l
3692.26 5812.62 l
3685.39 5805.22 l
3678.52 5797.81 l
3671.66 5790.41 l
3664.79 5783.01 l
3657.93 5775.61 l
3651.06 5768.21 l
3644.2 5760.81 l
3637.34 5753.41 l
3630.48 5746.01 l
3623.61 5738.6 l
3616.75 5731.2 l
3609.89 5723.8 l
3603.03 5716.4 l
3596.17 5709 l
3589.3 5701.58 l
3582.44 5694.18 l
3575.58 5686.78 l
3568.72 5679.38 l
3561.86 5671.98 l
3555.01 5664.58 l
3548.15 5657.18 l
3541.29 5649.78 l
3534.44 5642.37 l
3527.58 5634.97 l
3520.73 5627.57 l
3513.87 5620.17 l
3507.02 5612.77 l
3500.17 5605.36 l
3493.31 5597.96 l
3486.46 5590.56 l
3479.61 5583.16 l
3472.76 5575.76 l
3465.91 5568.35 l
3459.06 5560.95 l
3452.21 5553.55 l
3445.35 5546.14 l
3438.5 5538.73 l
3431.65 5531.33 l
3424.81 5523.93 l
3417.89 5516.45 l
3410.81 5508.79 l
3403.96 5501.39 l
3397.12 5493.99 l
3390.27 5486.58 l
3383.43 5479.18 l
3376.58 5471.78 l
3369.74 5464.37 l
3362.9 5456.97 l
3356.06 5449.57 l
3349.21 5442.16 l
3342.37 5434.76 l
3335.53 5427.35 l
3328.69 5419.95 l
3321.85 5412.54 l
3315.02 5405.14 l
3308.18 5397.74 l
3301.34 5390.33 l
3294.5 5382.93 l
3287.67 5375.52 l
3280.83 5368.12 l
3274 5360.71 l
3267.16 5353.31 l
3260.33 5345.9 l
3253.5 5338.49 l
3246.66 5331.09 l
3239.83 5323.68 l
3233 5316.27 l
3228.44 5311.34 l
3225.41 5308.04 l
3222.37 5304.75 l
3219.33 5301.45 l
3216.24 5298.1 l
3213.05 5294.64 l
3209.66 5290.96 l
3206.62 5287.67 l
3203.58 5284.37 l
3201.56 5282.18 l
3200.21 5280.72 l
3199.31 5279.74 l
3198.71 5279.09 l
3198.31 5278.66 l
3198.05 5278.37 l
3197.78 5278.08 l
3197.51 5277.78 l
3197.23 5277.48 l
3196.96 5277.19 l
3196.79 5277 l
3196.67 5276.87 l
3196.59 5276.79 l
3196.51 5276.7 l
3196.42 5276.61 l
3196.33 5276.5 l
3196.27 5276.44 l
3196.24 5276.4 l
3196.21 5276.38 l
3196.2 5276.36 l
3196.19 5276.35 l
3196.17 5276.33 l
3196.16 5276.32 l
3196.15 5276.31 l
3196.15 5276.31 l
3196.13 5276.29 l
3196.13 5276.29 l
3195.63 5275.75 l
3195.63 5275.75 l
3175 5253.36 l
3110.36 5183.17 l
3110.36 5183.16 l
3110.28 5183.08 l
3110.28 5183.07 l
3110.27 5183.07 l
3110.26 5183.05 l
3110.24 5183.04 l
3110.18 5182.97 l
3110.17 5182.96 l
3110.16 5182.94 l
3110.14 5182.92 l
3110.1 5182.89 l
3110.02 5182.79 l
3109.73 5182.48 l
3109.68 5182.43 l
3109.6 5182.34 l
3109.55 5182.28 l
3109.5 5182.23 l
3109.45 5182.18 l
3109.38 5182.1 l
3109.28 5181.98 l
3109.17 5181.87 l
3109.06 5181.75 l
3108.9 5181.58 l
3108.67 5181.32 l
3108.42 5181.06 l
3108.19 5180.8 l
3107.95 5180.54 l
3107.6 5180.16 l
3107.06 5179.58 l
3106.26 5178.71 l
3105.47 5177.85 l
3104.67 5176.98 l
3103.87 5176.11 l
3102.67 5174.81 l
3100.88 5172.86 l
3099.08 5170.91 l
3097.29 5168.95 l
3095.49 5167 l
3092.8 5164.08 l
3088.76 5159.69 l
3082.7 5153.1 l
3076.64 5146.51 l
3070.58 5139.92 l
3064.53 5133.34 l
3058.47 5126.75 l
3052.42 5120.16 l
3046.36 5113.57 l
3040.31 5106.99 l
3034.25 5100.4 l
3028.2 5093.81 l
3022.15 5087.22 l
3016.09 5080.63 l
3010.04 5074.04 l
3003.99 5067.45 l
2997.94 5060.87 l
2991.89 5054.28 l
2985.85 5047.69 l
2979.8 5041.1 l
2973.75 5034.51 l
2967.7 5027.92 l
2961.66 5021.33 l
2955.61 5014.73 l
2949.57 5008.14 l
2943.52 5001.55 l
2937.48 4994.96 l
2931.44 4988.37 l
2925.4 4981.78 l
2919.36 4975.18 l
2913.32 4968.59 l
2907.28 4962 l
2901.24 4955.41 l
2895.2 4948.81 l
2889.16 4942.22 l
2883.12 4935.62 l
2877.09 4929.03 l
2871.05 4922.43 l
2865.02 4915.84 l
2858.98 4909.25 l
2852.95 4902.65 l
2846.92 4896.06 l
2840.89 4889.46 l
2834.86 4882.86 l
2828.83 4876.27 l
2822.8 4869.67 l
2816.77 4863.07 l
2810.74 4856.48 l
2804.72 4849.88 l
2798.69 4843.28 l
2792.67 4836.68 l
2786.64 4830.08 l
2780.62 4823.49 l
2774.6 4816.89 l
2768.58 4810.29 l
2762.56 4803.69 l
2756.54 4797.09 l
2750.52 4790.49 l
2744.5 4783.88 l
2738.49 4777.28 l
2732.47 4770.68 l
2726.45 4764.08 l
2720.44 4757.48 l
2714.43 4750.87 l
2708.41 4744.27 l
2702.4 4737.67 l
2696.39 4731.06 l
2690.38 4724.46 l
2684.38 4717.85 l
2678.37 4711.25 l
2672.36 4704.64 l
2666.36 4698.03 l
2660.35 4691.43 l
2654.35 4684.82 l
2648.35 4678.21 l
2642.34 4671.61 l
2636.34 4665 l
2630.35 4658.39 l
2624.35 4651.78 l
2618.35 4645.17 l
2612.35 4638.56 l
2606.36 4631.95 l
2600.36 4625.33 l
2594.37 4618.72 l
2588.38 4612.11 l
2582.39 4605.5 l
2576.4 4598.88 l
2570.41 4592.27 l
2564.42 4585.65 l
2558.44 4579.04 l
2552.45 4572.42 l
2546.47 4565.81 l
2540.49 4559.19 l
2534.51 4552.57 l
2528.53 4545.95 l
2522.55 4539.33 l
2516.57 4532.72 l
2510.59 4526.09 l
2504.62 4519.47 l
2498.65 4512.85 l
2492.67 4506.23 l
2486.7 4499.61 l
2480.73 4492.99 l
2474.76 4486.36 l
2468.8 4479.74 l
2462.83 4473.11 l
2456.87 4466.48 l
2450.9 4459.86 l
2444.94 4453.23 l
2438.98 4446.6 l
2433.02 4439.97 l
2427.06 4433.34 l
2421.11 4426.71 l
2415.15 4420.08 l
2409.2 4413.45 l
2403.25 4406.82 l
2397.3 4400.18 l
2391.35 4393.55 l
2385.4 4386.91 l
2379.46 4380.27 l
2373.51 4373.64 l
2367.57 4367 l
2361.63 4360.36 l
2355.69 4353.72 l
2349.75 4347.08 l
2343.82 4340.44 l
2337.88 4333.79 l
2331.95 4327.15 l
2326.02 4320.51 l
2320.09 4313.86 l
2314.16 4307.21 l
2308.24 4300.57 l
2302.31 4293.92 l
2296.39 4287.27 l
2290.47 4280.62 l
2284.55 4273.97 l
2278.64 4267.31 l
2272.72 4260.66 l
2266.81 4254.01 l
2260.9 4247.35 l
2254.99 4240.69 l
2249.08 4234.03 l
2243.18 4227.38 l
2237.27 4220.72 l
2231.37 4214.05 l
2225.47 4207.39 l
2219.58 4200.73 l
2213.68 4194.06 l
2207.79 4187.4 l
2201.9 4180.73 l
2196.01 4174.06 l
2190.12 4167.39 l
2184.24 4160.72 l
2178.36 4154.05 l
2172.48 4147.37 l
2166.6 4140.7 l
2160.73 4134.02 l
2154.86 4127.34 l
2148.99 4120.66 l
2143.12 4113.98 l
2137.25 4107.3 l
2131.39 4100.61 l
2125.53 4093.93 l
2119.67 4087.24 l
2113.82 4080.55 l
2107.97 4073.86 l
2102.12 4067.17 l
2096.27 4060.48 l
2090.42 4053.79 l
2084.58 4047.09 l
2078.74 4040.39 l
2072.91 4033.69 l
2067.07 4026.99 l
2061.24 4020.29 l
2055.42 4013.58 l
2049.59 4006.88 l
2043.77 4000.17 l
2037.95 3993.46 l
2032.14 3986.75 l
2026.32 3980.04 l
2020.52 3973.32 l
2014.71 3966.6 l
2008.91 3959.89 l
2003.11 3953.16 l
1997.31 3946.44 l
1991.52 3939.72 l
1985.73 3932.99 l
1979.95 3926.26 l
1974.16 3919.53 l
1968.38 3912.8 l
1962.61 3906.07 l
1956.84 3899.33 l
1951.07 3892.59 l
1945.31 3885.85 l
1939.55 3879.11 l
1933.79 3872.36 l
1928.04 3865.62 l
1922.29 3858.87 l
1916.55 3852.12 l
1910.81 3845.36 l
1905.07 3838.61 l
1899.34 3831.85 l
1893.62 3825.09 l
1887.89 3818.33 l
1882.18 3811.56 l
1876.46 3804.8 l
1870.75 3798.03 l
1865.05 3791.26 l
1859.35 3784.48 l
1853.66 3777.71 l
1847.97 3770.93 l
1842.28 3764.15 l
1836.6 3757.36 l
1830.93 3750.58 l
1825.26 3743.79 l
1819.6 3737 l
1813.94 3730.2 l
1808.29 3723.41 l
1802.64 3716.61 l
1797 3709.81 l
1791.36 3703.01 l
1785.74 3696.2 l
1780.11 3689.39 l
1774.49 3682.58 l
1768.88 3675.77 l
1763.28 3668.95 l
1757.68 3662.14 l
1752.09 3655.32 l
1746.51 3648.49 l
1740.93 3641.67 l
1735.36 3634.84 l
1729.79 3628.01 l
1724.24 3621.18 l
1718.69 3614.34 l
1713.15 3607.5 l
1707.62 3600.66 l
1702.09 3593.82 l
1696.57 3586.98 l
1691.06 3580.13 l
1685.56 3573.28 l
1680.07 3566.43 l
1674.59 3559.58 l
1669.11 3552.73 l
1663.65 3545.87 l
1658.19 3539.01 l
1652.75 3532.16 l
1647.31 3525.3 l
1641.88 3518.43 l
1636.47 3511.57 l
1631.06 3504.71 l
1625.67 3497.84 l
1620.29 3490.98 l
1614.91 3484.11 l
1609.55 3477.24 l
1604.21 3470.38 l
1598.87 3463.51 l
1593.55 3456.65 l
1588.25 3449.79 l
1582.95 3442.93 l
1577.68 3436.07 l
1572.41 3429.22 l
1567.17 3422.37 l
1561.95 3415.53 l
1556.75 3408.71 l
1551.58 3401.92 l
1546.47 3395.17 l
1543.94 3391.83 l
1541.44 3388.52 l
1538.98 3385.25 l
1536.56 3382.03 l
1534.19 3378.89 l
1533.03 3377.35 l
1531.9 3375.84 l
1530.79 3374.36 l
1529.71 3372.91 l
1528.65 3371.51 l
1527.63 3370.15 l
1526.65 3368.84 l
1525.71 3367.58 l
1524.82 3366.38 l
1523.98 3365.26 l
1523.2 3364.22 l
1522.84 3363.73 l
1522.49 3363.26 l
1522.15 3362.82 l
1521.84 3362.39 l
1521.54 3361.99 l
1521.26 3361.61 l
1520.99 3361.26 l
1520.74 3360.92 l
1520.51 3360.61 l
1520.29 3360.32 l
1520.09 3360.05 l
1519.9 3359.79 l
1519.73 3359.56 l
1519.56 3359.35 l
1519.42 3359.15 l
1519.28 3358.97 l
1519.16 3358.8 l
1519.04 3358.64 l
1518.93 3358.5 l
1518.84 3358.37 l
1518.75 3358.25 l
1518.67 3358.14 l
1518.59 3358.04 l
1518.53 3357.95 l
1518.46 3357.87 l
1518.41 3357.79 l
1518.36 3357.72 l
1518.31 3357.66 l
1518.27 3357.6 l
1518.23 3357.55 l
1518.19 3357.5 l
1518.16 3357.46 l
1518.13 3357.42 l
1518.1 3357.38 l
1518.08 3357.35 l
1518.05 3357.32 l
1518.03 3357.29 l
1518.01 3357.27 l
1518 3357.24 l
1517.98 3357.22 l
1517.97 3357.2 l
1517.95 3357.19 l
1517.94 3357.17 l
1517.93 3357.15 l
1517.92 3357.14 l
1517.91 3357.13 l
1517.9 3357.12 l
1517.9 3357.11 l
1517.89 3357.1 l
1517.88 3357.09 l
1517.88 3357.08 l
1517.87 3357.08 l
1517.87 3357.07 l
1517.86 3357.06 l
1517.86 3357.06 l
1517.86 3357.06 l
1517.86 3357.06 l
1517.86 3357.05 l
1517.85 3357.05 l
1517.85 3357.05 l
1517.85 3357.05 l
1517.85 3357.05 l
1517.85 3357.04 l
1517.85 3357.04 l
1517.85 3357.04 l
1517.85 3357.04 l
1517.84 3357.04 l
1517.84 3357.04 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.84 3357.03 l
1517.83 3357.03 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
1517.83 3357.02 l
S
4166.85 6322.75 m
4164.9 6320.66 l
4162.78 6318.39 l
4160.67 6316.12 l
4158.56 6313.85 l
4156.45 6311.59 l
4154.34 6309.32 l
4152.23 6307.06 l
4150.12 6304.8 l
4148.02 6302.53 l
4145.91 6300.27 l
4143.81 6298.01 l
4141.7 6295.75 l
4139.6 6293.49 l
4137.49 6291.24 l
4135.39 6288.98 l
4133.29 6286.72 l
4131.19 6284.47 l
4129.09 6282.21 l
4126.99 6279.96 l
4124.89 6277.71 l
4122.8 6275.46 l
4120.7 6273.2 l
4118.61 6270.95 l
4116.51 6268.71 l
4114.42 6266.46 l
4112.32 6264.21 l
4110.23 6261.96 l
4108.14 6259.72 l
4106.05 6257.47 l
4103.96 6255.23 l
4101.87 6252.98 l
4099.78 6250.74 l
4097.7 6248.5 l
4095.61 6246.26 l
4093.52 6244.02 l
4091.44 6241.78 l
4089.36 6239.54 l
4087.27 6237.3 l
4085.19 6235.07 l
4083.11 6232.83 l
4081.03 6230.6 l
4078.95 6228.36 l
4076.87 6226.13 l
4074.79 6223.9 l
4073.41 6222.41 l
4072.02 6220.92 l
4070.64 6219.44 l
4069.25 6217.95 l
4067.87 6216.46 l
4066.49 6214.98 l
4065.1 6213.49 l
4063.72 6212.01 l
4062.34 6210.52 l
4060.96 6209.04 l
4059.58 6207.55 l
4058.2 6206.07 l
4056.82 6204.59 l
4055.44 6203.11 l
4054.06 6201.62 l
4052.68 6200.14 l
4051.3 6198.66 l
4049.92 6197.18 l
4048.54 6195.7 l
4047.17 6194.22 l
4045.79 6192.74 l
4044.41 6191.26 l
4043.04 6189.78 l
4041.66 6188.3 l
4040.28 6186.83 l
4038.91 6185.35 l
4037.53 6183.87 l
4036.16 6182.39 l
4034.79 6180.92 l
4033.41 6179.44 l
4032.04 6177.97 l
4030.67 6176.49 l
4029.29 6175.02 l
4027.92 6173.54 l
4026.55 6172.07 l
4025.18 6170.59 l
4023.81 6169.12 l
4022.43 6167.65 l
4021.06 6166.17 l
4019.69 6164.7 l
4018.33 6163.23 l
4016.96 6161.76 l
4015.59 6160.29 l
4014.22 6158.82 l
4012.85 6157.35 l
4011.48 6155.88 l
4010.12 6154.41 l
4008.75 6152.94 l
4007.38 6151.47 l
4006.02 6150 l
4004.65 6148.53 l
4003.28 6147.07 l
4001.92 6145.6 l
4000.56 6144.13 l
3999.19 6142.67 l
3997.83 6141.2 l
3996.46 6139.73 l
3995.1 6138.27 l
3993.74 6136.81 l
3992.38 6135.34 l
3991.01 6133.88 l
3989.65 6132.41 l
3988.29 6130.95 l
3986.93 6129.49 l
3985.57 6128.03 l
3984.21 6126.56 l
3982.85 6125.1 l
3981.49 6123.64 l
3980.13 6122.18 l
3978.77 6120.72 l
3977.42 6119.26 l
3976.06 6117.8 l
3974.7 6116.34 l
3973.34 6114.88 l
3971.99 6113.43 l
3970.63 6111.97 l
3969.28 6110.51 l
3967.92 6109.05 l
3966.57 6107.6 l
3965.21 6106.14 l
3963.86 6104.69 l
3962.5 6103.23 l
3961.15 6101.78 l
3959.8 6100.32 l
3958.45 6098.87 l
3957.09 6097.41 l
3955.74 6095.96 l
3954.39 6094.51 l
3953.04 6093.06 l
3951.69 6091.6 l
3950.34 6090.15 l
3948.99 6088.7 l
3947.64 6087.25 l
3946.29 6085.8 l
3944.94 6084.35 l
3943.59 6082.9 l
3942.25 6081.45 l
3940.9 6080 l
3939.55 6078.55 l
3938.2 6077.11 l
3936.86 6075.66 l
3935.51 6074.21 l
3934.17 6072.76 l
3932.82 6071.32 l
3931.48 6069.87 l
3930.13 6068.43 l
3928.79 6066.98 l
3927.45 6065.54 l
3926.1 6064.09 l
3924.76 6062.65 l
3923.42 6061.21 l
3922.08 6059.76 l
3920.74 6058.32 l
3919.39 6056.88 l
3918.05 6055.44 l
3916.71 6053.99 l
3915.37 6052.55 l
3914.03 6051.11 l
3912.7 6049.67 l
3911.36 6048.23 l
3910.02 6046.79 l
3908.68 6045.35 l
3907.34 6043.92 l
3906.01 6042.48 l
3904.67 6041.04 l
3903.33 6039.6 l
3902 6038.17 l
3900.66 6036.73 l
3899.33 6035.29 l
3897.99 6033.86 l
3896.66 6032.42 l
3895.32 6030.99 l
3893.99 6029.55 l
3892.66 6028.12 l
3891.32 6026.69 l
3889.99 6025.25 l
3888.66 6023.82 l
3887.33 6022.39 l
3886 6020.96 l
3884.67 6019.53 l
3883.34 6018.1 l
3882.01 6016.66 l
3880.68 6015.23 l
3879.35 6013.8 l
3878.02 6012.38 l
3876.69 6010.95 l
3875.36 6009.52 l
3874.04 6008.09 l
3872.71 6006.66 l
3871.38 6005.24 l
3870.06 6003.81 l
3868.73 6002.38 l
3867.41 6000.96 l
3866.08 5999.53 l
3864.76 5998.11 l
3863.43 5996.68 l
3862.11 5995.26 l
3860.79 5993.83 l
3859.46 5992.41 l
3858.14 5990.98 l
3856.82 5989.56 l
3855.5 5988.14 l
3854.17 5986.72 l
3852.85 5985.3 l
3851.53 5983.88 l
3850.21 5982.46 l
3848.89 5981.04 l
3847.57 5979.62 l
3846.26 5978.2 l
3844.94 5976.78 l
3843.62 5975.36 l
3842.3 5973.94 l
3840.98 5972.53 l
3839.67 5971.11 l
3838.35 5969.69 l
3837.03 5968.27 l
3835.72 5966.86 l
3834.4 5965.44 l
3833.09 5964.03 l
3831.77 5962.61 l
3830.46 5961.2 l
3829.15 5959.79 l
3827.83 5958.37 l
3826.52 5956.96 l
3825.21 5955.55 l
3823.9 5954.14 l
3822.58 5952.72 l
3821.27 5951.31 l
3819.96 5949.9 l
3818.65 5948.49 l
3817.34 5947.08 l
3816.03 5945.67 l
3814.72 5944.26 l
3813.42 5942.86 l
3812.11 5941.45 l
3810.8 5940.04 l
3809.49 5938.63 l
3808.19 5937.23 l
3806.88 5935.82 l
3805.57 5934.41 l
3804.27 5933.01 l
3802.96 5931.6 l
3801.66 5930.2 l
3800.35 5928.8 l
3799.05 5927.39 l
3797.75 5925.99 l
3796.44 5924.59 l
3795.14 5923.18 l
3793.84 5921.78 l
3792.54 5920.38 l
3791.24 5918.98 l
3789.94 5917.58 l
3788.63 5916.18 l
3787.33 5914.78 l
3786.04 5913.38 l
3784.74 5911.98 l
3783.44 5910.58 l
3782.14 5909.18 l
3780.84 5907.79 l
3779.54 5906.39 l
3778.25 5904.99 l
3776.95 5903.6 l
3775.65 5902.2 l
3774.36 5900.8 l
3773.05 5899.4 l
3771.75 5898 l
3770.46 5896.61 l
3769.17 5895.22 l
3767.87 5893.82 l
3766.58 5892.43 l
3765.28 5891.04 l
3763.98 5889.64 l
3762.69 5888.24 l
3761.4 5886.85 l
3760.11 5885.46 l
3758.82 5884.07 l
3757.53 5882.68 l
3756.24 5881.29 l
3754.95 5879.9 l
3753.65 5878.51 l
3752.33 5877.09 l
3751.05 5875.71 l
3749.76 5874.32 l
3748.47 5872.93 l
3747.19 5871.55 l
3745.9 5870.16 l
3744.61 5868.77 l
3743.3 5867.36 l
3742.01 5865.97 l
3740.73 5864.59 l
3739.44 5863.21 l
3738.16 5861.82 l
3736.88 5860.44 l
3735.59 5859.06 l
3734.31 5857.68 l
3733.03 5856.3 l
3731.75 5854.92 l
3730.46 5853.54 l
3729.18 5852.15 l
3727.9 5850.77 l
3726.62 5849.39 l
3725.34 5848.02 l
3724.06 5846.64 l
3722.77 5845.25 l
3721.47 5843.84 l
3720.19 5842.47 l
3718.91 5841.09 l
3717.64 5839.71 l
3716.36 5838.34 l
3715.08 5836.96 l
3713.81 5835.59 l
3712.53 5834.21 l
3711.24 5832.82 l
3709.96 5831.45 l
3708.69 5830.08 l
3707.42 5828.71 l
3706.14 5827.33 l
3704.87 5825.96 l
3703.6 5824.59 l
3702.32 5823.22 l
3701.04 5821.84 l
3699.77 5820.47 l
3698.5 5819.1 l
3697.23 5817.73 l
3695.96 5816.36 l
3694.69 5815 l
3693.42 5813.63 l
3692.16 5812.26 l
3690.87 5810.88 l
3689.56 5809.47 l
3688.3 5808.1 l
3687.03 5806.74 l
3685.77 5805.38 l
3684.48 5803.98 l
3683.17 5802.58 l
3681.91 5801.22 l
3680.64 5799.85 l
3679.38 5798.49 l
3678.11 5797.13 l
3676.85 5795.77 l
3675.59 5794.41 l
3674.32 5793.05 l
3673.06 5791.68 l
3671.8 5790.32 l
3670.54 5788.96 l
3669.28 5787.6 l
3668.02 5786.25 l
3666.75 5784.88 l
3665.49 5783.52 l
3664.23 5782.16 l
3662.97 5780.81 l
3661.71 5779.45 l
3660.45 5778.09 l
3659.16 5776.7 l
3657.91 5775.35 l
3656.65 5773.99 l
3655.39 5772.64 l
3654.13 5771.28 l
3652.85 5769.9 l
3651.6 5768.55 l
3650.35 5767.2 l
3649.09 5765.85 l
3647.83 5764.49 l
3646.55 5763.11 l
3645.3 5761.76 l
3644.05 5760.41 l
3642.8 5759.06 l
3641.54 5757.7 l
3640.26 5756.32 l
3639.01 5754.97 l
3637.76 5753.63 l
3636.51 5752.28 l
3635.26 5750.94 l
3634.01 5749.59 l
3632.77 5748.25 l
3631.52 5746.9 l
3630.27 5745.55 l
3629.02 5744.21 l
3627.78 5742.87 l
3626.53 5741.52 l
3625.29 5740.18 l
3624.04 5738.84 l
3622.8 5737.49 l
3621.54 5736.14 l
3620.3 5734.8 l
3619.06 5733.46 l
3617.81 5732.12 l
3616.57 5730.78 l
3615.33 5729.44 l
3614.09 5728.1 l
3612.83 5726.75 l
3611.59 5725.41 l
3610.36 5724.08 l
3609.12 5722.74 l
3607.88 5721.41 l
3606.64 5720.07 l
3605.4 5718.73 l
3604.15 5717.38 l
3602.91 5716.05 l
3601.67 5714.71 l
3600.44 5713.38 l
3599.2 5712.05 l
3597.97 5710.72 l
3596.73 5709.38 l
3595.48 5708.03 l
3594.25 5706.7 l
3593.02 5705.37 l
3591.78 5704.04 l
3590.55 5702.71 l
3589.31 5701.37 l
3588.08 5700.04 l
3586.84 5698.72 l
3585.61 5697.39 l
3584.38 5696.06 l
3583.15 5694.73 l
3581.92 5693.4 l
3580.69 5692.08 l
3579.47 5690.76 l
3578.24 5689.43 l
3577.01 5688.11 l
3575.78 5686.78 l
3574.55 5685.45 l
3573.33 5684.13 l
3572.1 5682.81 l
3570.88 5681.49 l
3569.65 5680.17 l
3568.43 5678.85 l
3567.21 5677.53 l
3565.98 5676.21 l
3564.76 5674.89 l
3563.54 5673.57 l
3562.32 5672.25 l
3561.09 5670.93 l
3559.87 5669.62 l
3558.65 5668.3 l
3557.43 5666.98 l
3556.21 5665.67 l
3554.99 5664.35 l
3553.78 5663.04 l
3552.56 5661.72 l
3551.34 5660.41 l
3550.13 5659.1 l
3548.91 5657.79 l
3547.69 5656.47 l
3546.48 5655.16 l
3545.26 5653.85 l
3544.05 5652.54 l
3542.83 5651.23 l
3541.62 5649.92 l
3540.41 5648.61 l
3539.2 5647.3 l
3537.98 5645.99 l
3536.77 5644.69 l
3535.56 5643.38 l
3534.35 5642.07 l
3533.14 5640.76 l
3531.93 5639.45 l
3530.72 5638.15 l
3529.51 5636.84 l
3528.3 5635.54 l
3527.09 5634.24 l
3525.88 5632.93 l
3524.68 5631.63 l
3523.47 5630.33 l
3522.27 5629.03 l
3521.06 5627.72 l
3519.86 5626.42 l
3518.65 5625.12 l
3517.44 5623.82 l
3516.24 5622.52 l
3515.04 5621.22 l
3513.84 5619.92 l
3512.63 5618.63 l
3511.43 5617.33 l
3510.23 5616.03 l
3509.03 5614.74 l
3507.83 5613.44 l
3506.63 5612.15 l
3505.43 5610.85 l
3504.23 5609.55 l
3503.03 5608.26 l
3501.84 5606.97 l
3500.64 5605.67 l
3499.44 5604.38 l
3498.25 5603.09 l
3497.05 5601.8 l
3495.85 5600.51 l
3494.66 5599.22 l
3493.47 5597.93 l
3492.27 5596.64 l
3491.08 5595.35 l
3489.89 5594.06 l
3488.69 5592.77 l
3487.5 5591.49 l
3486.31 5590.2 l
3485.12 5588.91 l
3483.93 5587.63 l
3482.74 5586.34 l
3481.55 5585.06 l
3480.36 5583.77 l
3479.17 5582.49 l
3477.98 5581.2 l
3476.79 5579.92 l
3475.61 5578.64 l
3474.42 5577.36 l
3473.23 5576.07 l
3472.05 5574.79 l
3470.86 5573.51 l
3469.68 5572.23 l
3468.49 5570.95 l
3467.3 5569.67 l
3466.12 5568.39 l
3464.94 5567.11 l
3463.76 5565.84 l
3462.57 5564.56 l
3461.39 5563.28 l
3460.21 5562.01 l
3459.03 5560.73 l
3457.85 5559.46 l
3456.67 5558.18 l
3455.49 5556.91 l
3454.31 5555.63 l
3453.14 5554.36 l
3451.96 5553.09 l
3450.78 5551.81 l
3449.6 5550.54 l
3448.42 5549.27 l
3447.25 5548 l
3446.07 5546.73 l
3444.9 5545.46 l
3443.72 5544.19 l
3442.55 5542.92 l
3441.38 5541.66 l
3440.2 5540.39 l
3439.03 5539.12 l
3437.86 5537.85 l
3436.69 5536.59 l
3435.52 5535.32 l
3434.35 5534.06 l
3433.18 5532.79 l
3432.01 5531.53 l
3430.84 5530.27 l
3429.67 5529 l
3428.49 5527.73 l
3427.33 5526.47 l
3426.16 5525.21 l
3424.99 5523.95 l
3423.83 5522.69 l
3422.66 5521.43 l
3421.5 5520.17 l
3420.33 5518.91 l
3419.17 5517.65 l
3418 5516.39 l
3416.84 5515.14 l
3415.68 5513.88 l
3414.52 5512.62 l
3413.35 5511.37 l
3412.19 5510.11 l
3411.03 5508.86 l
3409.87 5507.6 l
3408.71 5506.35 l
3407.55 5505.1 l
3406.39 5503.84 l
3405.23 5502.59 l
3404.08 5501.34 l
3402.92 5500.09 l
3401.76 5498.84 l
3400.61 5497.59 l
3399.45 5496.34 l
3398.3 5495.09 l
3397.14 5493.84 l
3395.99 5492.59 l
3394.84 5491.35 l
3393.68 5490.1 l
3392.53 5488.85 l
3391.38 5487.61 l
3390.23 5486.36 l
3389.07 5485.11 l
3387.92 5483.87 l
3386.77 5482.63 l
3385.62 5481.38 l
3384.47 5480.14 l
3383.32 5478.89 l
3382.17 5477.65 l
3381.03 5476.41 l
3379.88 5475.17 l
3378.73 5473.93 l
3377.59 5472.69 l
3376.44 5471.45 l
3375.29 5470.21 l
3374.15 5468.97 l
3373.01 5467.74 l
3371.86 5466.5 l
3370.72 5465.26 l
3369.58 5464.03 l
3368.44 5462.79 l
3367.29 5461.56 l
3366.15 5460.32 l
3365.01 5459.09 l
3363.87 5457.86 l
3362.73 5456.62 l
3361.59 5455.39 l
3360.45 5454.16 l
3359.32 5452.93 l
3358.18 5451.7 l
3357.04 5450.47 l
3355.91 5449.24 l
3354.77 5448.01 l
3353.63 5446.78 l
3352.5 5445.55 l
3351.36 5444.32 l
3350.23 5443.1 l
3349.1 5441.87 l
3347.96 5440.65 l
3346.83 5439.42 l
3345.7 5438.2 l
3344.57 5436.97 l
3343.44 5435.75 l
3342.31 5434.52 l
3341.18 5433.3 l
3340.05 5432.08 l
3338.92 5430.86 l
3337.79 5429.64 l
3336.66 5428.42 l
3335.54 5427.2 l
3334.41 5425.98 l
3333.28 5424.76 l
3332.16 5423.54 l
3331.03 5422.32 l
3329.91 5421.1 l
3328.78 5419.89 l
3327.66 5418.67 l
3326.53 5417.45 l
3325.41 5416.24 l
3324.29 5415.02 l
3323.17 5413.81 l
3322.05 5412.6 l
3320.93 5411.38 l
3319.8 5410.17 l
3318.68 5408.96 l
3317.57 5407.75 l
3316.45 5406.53 l
3315.33 5405.32 l
3314.21 5404.11 l
3313.09 5402.9 l
3311.98 5401.69 l
3310.86 5400.49 l
3309.74 5399.28 l
3308.63 5398.07 l
3307.51 5396.86 l
3306.4 5395.66 l
3305.29 5394.45 l
3304.17 5393.25 l
3303.06 5392.04 l
3301.95 5390.84 l
3300.84 5389.63 l
3299.73 5388.43 l
3298.62 5387.23 l
3297.51 5386.03 l
3296.4 5384.83 l
3295.29 5383.62 l
3294.18 5382.42 l
3293.07 5381.22 l
3291.96 5380.02 l
3290.86 5378.83 l
3289.75 5377.63 l
3288.64 5376.43 l
3287.54 5375.23 l
3286.43 5374.04 l
3285.33 5372.84 l
3284.23 5371.64 l
3283.12 5370.45 l
3282.02 5369.25 l
3280.92 5368.06 l
3279.81 5366.87 l
3278.71 5365.67 l
3277.61 5364.48 l
3276.51 5363.29 l
3275.41 5362.1 l
3274.31 5360.91 l
3273.22 5359.72 l
3272.12 5358.53 l
3271.02 5357.34 l
3269.92 5356.15 l
3268.83 5354.96 l
3267.73 5353.78 l
3266.63 5352.59 l
3265.54 5351.4 l
3264.44 5350.22 l
3263.35 5349.03 l
3262.26 5347.84 l
3261.16 5346.66 l
3260.07 5345.48 l
3258.98 5344.29 l
3257.89 5343.11 l
3256.8 5341.93 l
3255.71 5340.75 l
3254.62 5339.57 l
3253.53 5338.39 l
3252.44 5337.21 l
3251.35 5336.03 l
3250.26 5334.85 l
3249.17 5333.67 l
3248.09 5332.49 l
3247 5331.31 l
3245.92 5330.14 l
3244.83 5328.96 l
3243.75 5327.79 l
3242.66 5326.61 l
3241.58 5325.44 l
3240.49 5324.26 l
3239.41 5323.09 l
3238.33 5321.92 l
3237.25 5320.74 l
3236.17 5319.57 l
3235.09 5318.4 l
3234.01 5317.23 l
3232.93 5316.06 l
3231.85 5314.89 l
3230.77 5313.72 l
3229.69 5312.55 l
3228.62 5311.39 l
3227.54 5310.22 l
3226.46 5309.05 l
3225.39 5307.88 l
3224.31 5306.72 l
3223.24 5305.55 l
3222.16 5304.39 l
3221.09 5303.23 l
3220.01 5302.06 l
3218.94 5300.9 l
3217.87 5299.74 l
3216.8 5298.58 l
3215.73 5297.41 l
3214.66 5296.25 l
3213.59 5295.09 l
3212.52 5293.93 l
3211.45 5292.77 l
3210.38 5291.62 l
3209.31 5290.46 l
3208.25 5289.3 l
3207.18 5288.14 l
3206.11 5286.99 l
3205.05 5285.83 l
3203.98 5284.68 l
3202.92 5283.52 l
3201.85 5282.37 l
3200.79 5281.22 l
3199.73 5280.06 l
3198.66 5278.91 l
3197.6 5277.76 l
3196.54 5276.61 l
3195.48 5275.46 l
3194.42 5274.31 l
3193.36 5273.16 l
3192.3 5272.01 l
3191.24 5270.86 l
3190.18 5269.71 l
3189.13 5268.56 l
3188.07 5267.42 l
3187.01 5266.27 l
3186.31 5265.51 l
3185.84 5265 l
3185.37 5264.49 l
3185.06 5264.15 l
3184.85 5263.92 l
3184.71 5263.77 l
3184.62 5263.67 l
3184.56 5263.6 l
3184.51 5263.56 l
3184.48 5263.53 l
3184.47 5263.51 l
3184.45 5263.49 l
3184.44 5263.48 l
3184.44 5263.48 l
3175 5253.24 l
3165.58 5243.02 l
3165.58 5243.01 l
3165.57 5243 l
3165.55 5242.99 l
3165.54 5242.97 l
3165.51 5242.94 l
3165.47 5242.89 l
3165.41 5242.83 l
3165.31 5242.73 l
3165.18 5242.58 l
3164.97 5242.35 l
3164.66 5242.02 l
3164.2 5241.51 l
3163.5 5240.76 l
3162.8 5240 l
3161.76 5238.87 l
3160.72 5237.74 l
3159.67 5236.6 l
3158.63 5235.47 l
3157.59 5234.34 l
3156.55 5233.21 l
3155.51 5232.08 l
3154.47 5230.96 l
3153.43 5229.83 l
3152.39 5228.7 l
3151.35 5227.57 l
3150.32 5226.45 l
3149.28 5225.32 l
3148.24 5224.19 l
3147.2 5223.07 l
3146.17 5221.94 l
3145.13 5220.82 l
3144.1 5219.7 l
3143.07 5218.58 l
3142.03 5217.45 l
3141 5216.33 l
3139.97 5215.21 l
3138.94 5214.09 l
3137.9 5212.97 l
3136.87 5211.85 l
3135.84 5210.73 l
3134.81 5209.61 l
3133.78 5208.5 l
3132.76 5207.38 l
3131.73 5206.26 l
3130.7 5205.15 l
3129.67 5204.03 l
3128.65 5202.92 l
3127.62 5201.8 l
3126.6 5200.69 l
3125.57 5199.58 l
3124.55 5198.47 l
3123.52 5197.35 l
3122.5 5196.24 l
3121.48 5195.13 l
3120.46 5194.02 l
3119.43 5192.91 l
3118.41 5191.8 l
3117.39 5190.7 l
3116.37 5189.59 l
3115.35 5188.48 l
3114.34 5187.37 l
3113.32 5186.27 l
3112.3 5185.16 l
3111.28 5184.06 l
3110.27 5182.95 l
3109.25 5181.85 l
3108.23 5180.75 l
3107.22 5179.64 l
3106.21 5178.54 l
3105.19 5177.44 l
3104.18 5176.34 l
3103.17 5175.24 l
3102.15 5174.14 l
3101.14 5173.04 l
3100.13 5171.94 l
3099.12 5170.84 l
3098.11 5169.74 l
3097.1 5168.65 l
3096.09 5167.55 l
3095.08 5166.45 l
3094.08 5165.36 l
3093.07 5164.26 l
3092.06 5163.17 l
3091.06 5162.08 l
3090.05 5160.98 l
3089.05 5159.89 l
3088.04 5158.8 l
3087.04 5157.71 l
3086.03 5156.62 l
3085.03 5155.53 l
3084.03 5154.44 l
3083.03 5153.35 l
3082.02 5152.26 l
3081.02 5151.17 l
3080.02 5150.09 l
3079.02 5149 l
3078.03 5147.91 l
3077.03 5146.83 l
3076.03 5145.74 l
3075.03 5144.66 l
3074.04 5143.58 l
3073.04 5142.49 l
3072.04 5141.41 l
3071.05 5140.33 l
3070.05 5139.25 l
3069.06 5138.17 l
3068.07 5137.09 l
3067.07 5136.01 l
3066.08 5134.93 l
3065.09 5133.85 l
3064.1 5132.77 l
3063.11 5131.69 l
3062.12 5130.62 l
3061.13 5129.54 l
3060.14 5128.46 l
3059.15 5127.39 l
3058.16 5126.32 l
3057.17 5125.24 l
3056.19 5124.17 l
3055.2 5123.1 l
3054.22 5122.02 l
3053.23 5120.95 l
3052.25 5119.88 l
3051.26 5118.81 l
3050.28 5117.74 l
3049.3 5116.67 l
3048.31 5115.6 l
3047.33 5114.53 l
3046.35 5113.47 l
3045.37 5112.4 l
3044.39 5111.33 l
3043.41 5110.27 l
3042.43 5109.2 l
3041.45 5108.14 l
3040.47 5107.07 l
3039.5 5106.01 l
3038.52 5104.95 l
3037.54 5103.89 l
3036.57 5102.82 l
3035.59 5101.76 l
3034.62 5100.7 l
3033.64 5099.64 l
3032.67 5098.58 l
3031.7 5097.53 l
3030.73 5096.47 l
3029.75 5095.41 l
3028.78 5094.35 l
3027.81 5093.3 l
3026.84 5092.24 l
3025.87 5091.19 l
3024.9 5090.13 l
3023.93 5089.08 l
3022.97 5088.02 l
3022 5086.97 l
3021.03 5085.92 l
3020.07 5084.87 l
3019.1 5083.82 l
3018.14 5082.76 l
3017.17 5081.71 l
3016.21 5080.67 l
3015.24 5079.62 l
3014.28 5078.57 l
3013.32 5077.52 l
3012.36 5076.47 l
3011.4 5075.43 l
3010.44 5074.38 l
3009.48 5073.34 l
3008.52 5072.29 l
3007.56 5071.25 l
3006.6 5070.2 l
3005.64 5069.16 l
3004.68 5068.12 l
3003.73 5067.08 l
3002.77 5066.04 l
3001.82 5065 l
3000.86 5063.96 l
2999.91 5062.92 l
2998.95 5061.88 l
2998 5060.84 l
2997.05 5059.8 l
2996.09 5058.76 l
2995.14 5057.73 l
2994.19 5056.69 l
2993.24 5055.66 l
2992.29 5054.62 l
2991.34 5053.59 l
2990.39 5052.56 l
2989.44 5051.52 l
2988.5 5050.49 l
2987.55 5049.46 l
2986.6 5048.43 l
2985.66 5047.4 l
2984.71 5046.37 l
2983.77 5045.34 l
2982.82 5044.31 l
2981.88 5043.28 l
2980.94 5042.25 l
2979.99 5041.23 l
2979.05 5040.2 l
2978.11 5039.17 l
2977.17 5038.15 l
2976.23 5037.12 l
2975.29 5036.1 l
2974.35 5035.08 l
2973.41 5034.05 l
2972.47 5033.03 l
2971.54 5032.01 l
2970.6 5030.99 l
2969.66 5029.97 l
2968.73 5028.95 l
2967.79 5027.93 l
2966.86 5026.91 l
2965.92 5025.89 l
2964.99 5024.88 l
2964.06 5023.86 l
2963.12 5022.84 l
2962.19 5021.83 l
2961.26 5020.81 l
2960.33 5019.8 l
2959.4 5018.78 l
2958.47 5017.77 l
2957.54 5016.76 l
2956.61 5015.75 l
2955.68 5014.73 l
2954.76 5013.72 l
2953.83 5012.71 l
2952.9 5011.7 l
2951.98 5010.69 l
2951.05 5009.69 l
2950.13 5008.68 l
2949.21 5007.67 l
2948.28 5006.66 l
2947.36 5005.66 l
2946.44 5004.65 l
2945.52 5003.65 l
2944.6 5002.64 l
2943.67 5001.64 l
2942.75 5000.64 l
2941.84 4999.63 l
2940.92 4998.63 l
2940 4997.63 l
2939.08 4996.63 l
2938.16 4995.63 l
2937.25 4994.63 l
2936.33 4993.63 l
2935.42 4992.63 l
2934.5 4991.63 l
2933.59 4990.64 l
2932.67 4989.64 l
2931.76 4988.65 l
2930.85 4987.65 l
2929.94 4986.65 l
2929.02 4985.66 l
2928.11 4984.67 l
2927.2 4983.67 l
2926.29 4982.68 l
2925.38 4981.69 l
2924.48 4980.7 l
2923.57 4979.71 l
2922.66 4978.72 l
2921.75 4977.73 l
2920.85 4976.74 l
2919.94 4975.75 l
2919.04 4974.76 l
2918.13 4973.78 l
2917.23 4972.79 l
2916.32 4971.81 l
2915.42 4970.82 l
2914.52 4969.84 l
2913.62 4968.85 l
2912.72 4967.87 l
2911.82 4966.88 l
2910.92 4965.9 l
2910.02 4964.92 l
2909.12 4963.94 l
2908.22 4962.96 l
2907.32 4961.98 l
2906.43 4961 l
2905.53 4960.02 l
2904.63 4959.04 l
2903.74 4958.07 l
2902.84 4957.09 l
2901.95 4956.11 l
2901.05 4955.14 l
2900.16 4954.16 l
2899.27 4953.19 l
2898.38 4952.21 l
2897.49 4951.24 l
2896.59 4950.27 l
2895.7 4949.3 l
2894.81 4948.33 l
2893.93 4947.35 l
2893.04 4946.38 l
2892.15 4945.41 l
2891.26 4944.45 l
2890.37 4943.48 l
2889.49 4942.51 l
2888.6 4941.54 l
2887.72 4940.58 l
2886.83 4939.61 l
2885.95 4938.64 l
2885.07 4937.68 l
2884.18 4936.72 l
2883.3 4935.75 l
2882.42 4934.79 l
2881.54 4933.83 l
2880.66 4932.86 l
2879.78 4931.9 l
2878.9 4930.94 l
2878.02 4929.98 l
2877.14 4929.02 l
2876.26 4928.07 l
2875.39 4927.11 l
2874.51 4926.15 l
2873.63 4925.19 l
2872.76 4924.24 l
2871.88 4923.28 l
2871.01 4922.33 l
2870.14 4921.37 l
2869.26 4920.42 l
2868.39 4919.46 l
2867.52 4918.51 l
2866.65 4917.56 l
2865.78 4916.61 l
2864.91 4915.66 l
2864.04 4914.71 l
2863.17 4913.76 l
2862.3 4912.81 l
2861.43 4911.86 l
2860.56 4910.91 l
2859.7 4909.96 l
2858.83 4909.02 l
2857.97 4908.07 l
2857.1 4907.13 l
2856.24 4906.18 l
2855.37 4905.24 l
2854.51 4904.29 l
2853.65 4903.35 l
2852.78 4902.41 l
2851.92 4901.47 l
2851.06 4900.52 l
2850.2 4899.58 l
2849.34 4898.64 l
2848.48 4897.7 l
2847.62 4896.77 l
2846.77 4895.83 l
2845.91 4894.89 l
2845.05 4893.95 l
2844.19 4893.02 l
2843.34 4892.08 l
2842.48 4891.15 l
2841.63 4890.21 l
2840.77 4889.28 l
2839.92 4888.34 l
2839.07 4887.41 l
2838.22 4886.48 l
2837.36 4885.55 l
2836.51 4884.62 l
2835.66 4883.69 l
2834.81 4882.76 l
2833.96 4881.83 l
2833.11 4880.9 l
2832.27 4879.97 l
2831.42 4879.04 l
2830.57 4878.12 l
2829.72 4877.19 l
2828.88 4876.26 l
2828.03 4875.34 l
2827.19 4874.42 l
2826.34 4873.49 l
2825.5 4872.57 l
2824.66 4871.65 l
2823.81 4870.72 l
2822.97 4869.8 l
2822.13 4868.88 l
2821.29 4867.96 l
2820.45 4867.04 l
2819.61 4866.12 l
2818.77 4865.21 l
2817.93 4864.29 l
2817.09 4863.37 l
2816.26 4862.45 l
2815.42 4861.54 l
2814.58 4860.62 l
2813.75 4859.71 l
2812.91 4858.8 l
2812.08 4857.88 l
2811.24 4856.97 l
2810.41 4856.06 l
2809.58 4855.15 l
2808.75 4854.23 l
2807.91 4853.32 l
2807.08 4852.41 l
2806.25 4851.51 l
2805.42 4850.6 l
2804.59 4849.69 l
2803.76 4848.78 l
2802.94 4847.88 l
2802.11 4846.97 l
2801.28 4846.06 l
2800.46 4845.16 l
2799.63 4844.25 l
2798.8 4843.35 l
2797.98 4842.45 l
2797.15 4841.55 l
2796.33 4840.64 l
2795.51 4839.74 l
2794.69 4838.84 l
2793.86 4837.94 l
2793.04 4837.04 l
2792.22 4836.14 l
2791.4 4835.25 l
2790.58 4834.35 l
2789.76 4833.45 l
2788.95 4832.55 l
2788.13 4831.66 l
2787.31 4830.76 l
2786.49 4829.87 l
2785.68 4828.98 l
2784.86 4828.08 l
2784.05 4827.19 l
2783.23 4826.3 l
2782.42 4825.41 l
2781.61 4824.52 l
2780.79 4823.62 l
2779.98 4822.74 l
2779.17 4821.85 l
2778.36 4820.96 l
2777.55 4820.07 l
2776.74 4819.18 l
2775.93 4818.3 l
2775.12 4817.41 l
2774.31 4816.52 l
2773.51 4815.64 l
2772.7 4814.76 l
2771.89 4813.87 l
2771.09 4812.99 l
2770.28 4812.11 l
2769.48 4811.22 l
2768.67 4810.34 l
2767.87 4809.46 l
2767.07 4808.58 l
2766.26 4807.7 l
2765.46 4806.82 l
2764.66 4805.95 l
2763.86 4805.07 l
2763.06 4804.19 l
2762.26 4803.32 l
2761.46 4802.44 l
2760.66 4801.57 l
2759.87 4800.69 l
2759.07 4799.82 l
2758.27 4798.94 l
2757.48 4798.07 l
2756.68 4797.2 l
2755.89 4796.33 l
2755.09 4795.46 l
2754.3 4794.59 l
2753.51 4793.72 l
2752.71 4792.85 l
2751.92 4791.98 l
2751.13 4791.11 l
2750.34 4790.24 l
2749.55 4789.38 l
2748.76 4788.51 l
2747.97 4787.65 l
2747.18 4786.78 l
2746.39 4785.92 l
2745.61 4785.05 l
2744.82 4784.19 l
2744.03 4783.33 l
2743.25 4782.47 l
2742.46 4781.61 l
2741.68 4780.74 l
2740.9 4779.89 l
2740.11 4779.03 l
2739.33 4778.17 l
2738.55 4777.31 l
2737.77 4776.45 l
2736.98 4775.59 l
2736.2 4774.74 l
2735.42 4773.88 l
2734.65 4773.03 l
2733.87 4772.17 l
2733.09 4771.32 l
2732.31 4770.47 l
2731.53 4769.61 l
2730.76 4768.76 l
2729.98 4767.91 l
2729.21 4767.06 l
2728.43 4766.21 l
2727.66 4765.36 l
2726.88 4764.51 l
2726.11 4763.66 l
2725.34 4762.81 l
2724.57 4761.97 l
2723.8 4761.12 l
2723.02 4760.27 l
2722.25 4759.43 l
2721.49 4758.58 l
2720.72 4757.74 l
2719.95 4756.9 l
2719.18 4756.05 l
2718.41 4755.21 l
2717.65 4754.37 l
2716.88 4753.53 l
2716.11 4752.69 l
2715.35 4751.85 l
2714.59 4751.01 l
2713.82 4750.17 l
2713.06 4749.33 l
2712.3 4748.49 l
2711.53 4747.66 l
2710.77 4746.82 l
2710.01 4745.99 l
2709.25 4745.15 l
2708.49 4744.32 l
2707.73 4743.48 l
2706.97 4742.65 l
2706.21 4741.82 l
2705.46 4740.98 l
2704.7 4740.15 l
2703.94 4739.32 l
2703.19 4738.49 l
2702.43 4737.66 l
2701.68 4736.83 l
2700.92 4736 l
2700.17 4735.18 l
2699.42 4734.35 l
2698.67 4733.52 l
2697.91 4732.7 l
2697.16 4731.87 l
2696.41 4731.05 l
2695.66 4730.22 l
2694.91 4729.4 l
2694.16 4728.58 l
2693.41 4727.75 l
2692.67 4726.93 l
2691.92 4726.11 l
2691.17 4725.29 l
2690.43 4724.47 l
2689.68 4723.65 l
2688.94 4722.83 l
2688.19 4722.01 l
2687.45 4721.2 l
2686.71 4720.38 l
2685.96 4719.56 l
2685.22 4718.75 l
2684.48 4717.93 l
2683.74 4717.12 l
2683 4716.3 l
2682.26 4715.49 l
2681.52 4714.68 l
2680.78 4713.86 l
2680.04 4713.05 l
2679.3 4712.24 l
2678.57 4711.43 l
2677.83 4710.62 l
2677.09 4709.81 l
2676.36 4709 l
2675.63 4708.2 l
2674.89 4707.39 l
2674.16 4706.58 l
2673.42 4705.78 l
2672.69 4704.97 l
2671.96 4704.17 l
2671.23 4703.36 l
2670.5 4702.56 l
2669.77 4701.76 l
2669.04 4700.95 l
2668.31 4700.15 l
2667.58 4699.35 l
2666.85 4698.55 l
2666.13 4697.75 l
2665.4 4696.95 l
2664.67 4696.15 l
2663.95 4695.35 l
2663.22 4694.55 l
2662.5 4693.76 l
2661.77 4692.96 l
2661.05 4692.16 l
2660.33 4691.37 l
2659.6 4690.57 l
2658.88 4689.78 l
2658.16 4688.99 l
2657.44 4688.19 l
2656.72 4687.4 l
2656 4686.61 l
2655.28 4685.82 l
2654.56 4685.03 l
2653.85 4684.24 l
2653.13 4683.45 l
2652.41 4682.66 l
2651.7 4681.87 l
2650.98 4681.08 l
2650.27 4680.3 l
2649.55 4679.51 l
2648.84 4678.73 l
2648.13 4677.94 l
2647.41 4677.16 l
2646.7 4676.37 l
2645.99 4675.59 l
2645.28 4674.81 l
2644.57 4674.02 l
2643.86 4673.24 l
2643.15 4672.46 l
2642.44 4671.68 l
2641.73 4670.9 l
2641.02 4670.12 l
2640.32 4669.34 l
2639.61 4668.57 l
2638.91 4667.79 l
2638.2 4667.01 l
2637.5 4666.24 l
2636.79 4665.46 l
2636.09 4664.69 l
2635.38 4663.91 l
2634.68 4663.14 l
2633.98 4662.36 l
2633.28 4661.59 l
2632.58 4660.82 l
2631.88 4660.05 l
2631.18 4659.28 l
2630.48 4658.51 l
2629.78 4657.74 l
2629.08 4656.97 l
2628.38 4656.2 l
2627.69 4655.43 l
2626.99 4654.67 l
2626.3 4653.9 l
2625.6 4653.13 l
2624.91 4652.37 l
2624.21 4651.6 l
2623.52 4650.84 l
2622.83 4650.07 l
2622.13 4649.31 l
2621.44 4648.55 l
2620.75 4647.79 l
2620.06 4647.03 l
2619.37 4646.27 l
2618.68 4645.5 l
2617.99 4644.75 l
2617.3 4643.99 l
2616.61 4643.23 l
2615.93 4642.47 l
2615.24 4641.71 l
2614.55 4640.96 l
2613.87 4640.2 l
2613.18 4639.45 l
2612.5 4638.69 l
2611.81 4637.94 l
2611.13 4637.18 l
2610.45 4636.43 l
2609.76 4635.68 l
2609.08 4634.93 l
2608.4 4634.17 l
2607.72 4633.42 l
2607.04 4632.67 l
2606.36 4631.92 l
2605.68 4631.18 l
2605 4630.43 l
2604.33 4629.68 l
2603.65 4628.93 l
2602.97 4628.19 l
2602.29 4627.44 l
2601.62 4626.69 l
2600.94 4625.95 l
2600.27 4625.21 l
2599.6 4624.46 l
2598.92 4623.72 l
2598.25 4622.98 l
2597.58 4622.23 l
2596.9 4621.49 l
2596.23 4620.75 l
2595.56 4620.01 l
2594.89 4619.27 l
2594.22 4618.54 l
2593.55 4617.8 l
2592.89 4617.06 l
2592.22 4616.32 l
2591.55 4615.59 l
2590.88 4614.85 l
2590.22 4614.11 l
2589.55 4613.38 l
2588.89 4612.65 l
2588.22 4611.91 l
2587.56 4611.18 l
2586.89 4610.45 l
2586.23 4609.71 l
2585.57 4608.98 l
2584.91 4608.25 l
2584.24 4607.52 l
2583.58 4606.79 l
2582.92 4606.06 l
2582.26 4605.34 l
2581.6 4604.61 l
2580.95 4603.88 l
2580.29 4603.15 l
2579.63 4602.43 l
2578.97 4601.7 l
2578.32 4600.98 l
2577.66 4600.25 l
2577.01 4599.53 l
2576.35 4598.81 l
2575.7 4598.09 l
2575.04 4597.36 l
2574.39 4596.64 l
2573.74 4595.92 l
2573.09 4595.2 l
2572.43 4594.48 l
2571.78 4593.76 l
2571.13 4593.04 l
2570.48 4592.33 l
2569.83 4591.61 l
2569.18 4590.89 l
2568.54 4590.18 l
2567.89 4589.46 l
2567.24 4588.75 l
2566.59 4588.03 l
2565.95 4587.32 l
2565.3 4586.6 l
2564.66 4585.89 l
2564.01 4585.18 l
2563.37 4584.47 l
2562.73 4583.76 l
2562.08 4583.05 l
2561.44 4582.34 l
2560.8 4581.63 l
2560.16 4580.92 l
2559.52 4580.21 l
2558.88 4579.5 l
2558.24 4578.8 l
2557.6 4578.09 l
2556.96 4577.39 l
2556.32 4576.68 l
2555.69 4575.98 l
2555.05 4575.27 l
2554.41 4574.57 l
2553.78 4573.87 l
2553.14 4573.16 l
2552.51 4572.46 l
2551.87 4571.76 l
2551.24 4571.06 l
2550.61 4570.36 l
2549.97 4569.66 l
2549.34 4568.96 l
2548.71 4568.27 l
2548.08 4567.57 l
2547.45 4566.87 l
2546.82 4566.17 l
2546.19 4565.48 l
2545.56 4564.78 l
2544.93 4564.09 l
2544.31 4563.39 l
2543.68 4562.7 l
2543.05 4562.01 l
2542.43 4561.32 l
2541.8 4560.62 l
2541.18 4559.93 l
2540.55 4559.24 l
2539.93 4558.55 l
2539.3 4557.86 l
2538.68 4557.17 l
2538.06 4556.48 l
2537.44 4555.8 l
2536.82 4555.11 l
2536.2 4554.42 l
2535.57 4553.74 l
2534.96 4553.05 l
2534.34 4552.37 l
2533.72 4551.68 l
2533.1 4551 l
2532.48 4550.31 l
2531.86 4549.63 l
2531.25 4548.95 l
2530.63 4548.27 l
2530.02 4547.59 l
2529.4 4546.91 l
2528.79 4546.23 l
2528.17 4545.55 l
2527.56 4544.87 l
2526.95 4544.19 l
2526.34 4543.51 l
2525.72 4542.84 l
2525.11 4542.16 l
2524.5 4541.48 l
2523.89 4540.81 l
2523.28 4540.13 l
2522.67 4539.46 l
2522.07 4538.78 l
2521.46 4538.11 l
2520.85 4537.44 l
2520.24 4536.77 l
2519.64 4536.1 l
2519.03 4535.42 l
2518.43 4534.75 l
2517.82 4534.08 l
2517.22 4533.42 l
2516.61 4532.75 l
2516.01 4532.08 l
2515.41 4531.41 l
2514.81 4530.74 l
2514.2 4530.08 l
2513.6 4529.41 l
2513 4528.75 l
2512.4 4528.08 l
2511.8 4527.42 l
2511.2 4526.76 l
2510.61 4526.09 l
2510.01 4525.43 l
2509.41 4524.77 l
2508.81 4524.11 l
2508.22 4523.45 l
2507.62 4522.79 l
2507.03 4522.13 l
2506.43 4521.47 l
2505.84 4520.81 l
2505.24 4520.15 l
2504.65 4519.49 l
2504.06 4518.84 l
2503.47 4518.18 l
2502.87 4517.53 l
2502.28 4516.87 l
2501.69 4516.22 l
2501.1 4515.56 l
2500.51 4514.91 l
2499.92 4514.25 l
2499.33 4513.6 l
2498.75 4512.95 l
2498.16 4512.3 l
2497.57 4511.65 l
2496.99 4511 l
2496.4 4510.35 l
2495.81 4509.7 l
2495.23 4509.05 l
2494.65 4508.4 l
2494.06 4507.76 l
2493.48 4507.11 l
2492.9 4506.46 l
2492.31 4505.82 l
2491.73 4505.17 l
2491.15 4504.53 l
2490.57 4503.88 l
2489.99 4503.24 l
2489.41 4502.6 l
2488.83 4501.96 l
2488.25 4501.31 l
2487.67 4500.67 l
2487.1 4500.03 l
2486.52 4499.39 l
2485.94 4498.75 l
2485.37 4498.11 l
2484.79 4497.47 l
2484.21 4496.84 l
2483.64 4496.2 l
2483.07 4495.56 l
2482.49 4494.93 l
2481.92 4494.29 l
2481.35 4493.65 l
2480.77 4493.02 l
2480.2 4492.39 l
2479.63 4491.75 l
2479.06 4491.12 l
2478.49 4490.49 l
2477.92 4489.85 l
2477.35 4489.22 l
2476.78 4488.59 l
2476.22 4487.96 l
2475.65 4487.33 l
2475.08 4486.7 l
2474.52 4486.07 l
2473.95 4485.45 l
2473.39 4484.82 l
2472.82 4484.19 l
2472.26 4483.56 l
2471.69 4482.94 l
2471.13 4482.31 l
2470.57 4481.69 l
2470 4481.06 l
2469.44 4480.44 l
2468.88 4479.82 l
2468.32 4479.19 l
2467.76 4478.57 l
2467.2 4477.95 l
2466.64 4477.33 l
2466.08 4476.71 l
2465.52 4476.09 l
2464.96 4475.47 l
2464.41 4474.85 l
2463.85 4474.23 l
2463.29 4473.61 l
2462.74 4473 l
2462.18 4472.38 l
2461.63 4471.76 l
2461.07 4471.15 l
2460.52 4470.53 l
2459.97 4469.92 l
2459.41 4469.3 l
2458.86 4468.69 l
2458.31 4468.08 l
2457.76 4467.47 l
2457.21 4466.85 l
2456.66 4466.24 l
2456.11 4465.63 l
2455.56 4465.02 l
2455.01 4464.41 l
2454.46 4463.8 l
2453.91 4463.19 l
2453.37 4462.59 l
2452.82 4461.98 l
2452.27 4461.37 l
2451.73 4460.76 l
2451.18 4460.16 l
2450.64 4459.55 l
2450.09 4458.95 l
2449.55 4458.34 l
2449.01 4457.74 l
2448.46 4457.14 l
2447.92 4456.53 l
2447.38 4455.93 l
2446.84 4455.33 l
2446.3 4454.73 l
2445.76 4454.13 l
2445.22 4453.53 l
2444.68 4452.93 l
2444.14 4452.33 l
2443.6 4451.73 l
2443.06 4451.13 l
2442.53 4450.53 l
2441.99 4449.94 l
2441.45 4449.34 l
2440.92 4448.74 l
2440.38 4448.15 l
2439.85 4447.55 l
2439.31 4446.96 l
2438.78 4446.37 l
2438.24 4445.77 l
2437.71 4445.18 l
2437.18 4444.59 l
2436.65 4443.99 l
2436.11 4443.4 l
2435.58 4442.81 l
2435.05 4442.22 l
2434.52 4441.63 l
2433.99 4441.04 l
2433.46 4440.45 l
2432.94 4439.87 l
2432.41 4439.28 l
2431.88 4438.69 l
2431.35 4438.11 l
2430.83 4437.52 l
2430.3 4436.93 l
2429.77 4436.35 l
2429.25 4435.76 l
2428.72 4435.18 l
2428.2 4434.6 l
2427.68 4434.01 l
2427.15 4433.43 l
2426.63 4432.85 l
2426.11 4432.27 l
2425.59 4431.69 l
2425.06 4431.11 l
2424.54 4430.53 l
2424.02 4429.95 l
2423.5 4429.37 l
2422.98 4428.79 l
2422.46 4428.21 l
2421.95 4427.64 l
2421.43 4427.06 l
2420.91 4426.48 l
2420.39 4425.91 l
2419.88 4425.33 l
2419.36 4424.76 l
2418.85 4424.18 l
2418.33 4423.61 l
2417.82 4423.04 l
2417.3 4422.46 l
2416.79 4421.89 l
2416.27 4421.32 l
2415.76 4420.75 l
2415.25 4420.18 l
2414.74 4419.61 l
2414.23 4419.04 l
2413.72 4418.47 l
2413.21 4417.9 l
2412.7 4417.33 l
2412.19 4416.77 l
2411.68 4416.2 l
2411.17 4415.63 l
2410.66 4415.07 l
2410.15 4414.5 l
2409.65 4413.94 l
2409.14 4413.37 l
2408.63 4412.81 l
2408.13 4412.24 l
2407.62 4411.68 l
2407.12 4411.12 l
2406.61 4410.56 l
2406.11 4410 l
2405.61 4409.43 l
2405.1 4408.87 l
2404.6 4408.31 l
2404.1 4407.76 l
2403.6 4407.2 l
2403.1 4406.64 l
2402.6 4406.08 l
2402.1 4405.52 l
2401.6 4404.97 l
2401.1 4404.41 l
2400.6 4403.85 l
2400.1 4403.3 l
2399.6 4402.74 l
2399.11 4402.19 l
2398.61 4401.64 l
2398.11 4401.08 l
2397.62 4400.53 l
2397.12 4399.98 l
2396.63 4399.42 l
2396.13 4398.87 l
2395.64 4398.32 l
2395.15 4397.77 l
2394.65 4397.22 l
2394.16 4396.67 l
2393.67 4396.12 l
2393.18 4395.58 l
2392.68 4395.03 l
2392.19 4394.48 l
2391.7 4393.93 l
2391.21 4393.39 l
2390.72 4392.84 l
2390.24 4392.3 l
2389.75 4391.75 l
2389.26 4391.21 l
2388.77 4390.66 l
2388.28 4390.12 l
2387.8 4389.58 l
2387.31 4389.03 l
2386.83 4388.49 l
2386.34 4387.95 l
2385.86 4387.41 l
2385.37 4386.87 l
2384.89 4386.33 l
2384.4 4385.79 l
2383.92 4385.25 l
2383.44 4384.71 l
2382.96 4384.17 l
2382.47 4383.64 l
2381.99 4383.1 l
2381.51 4382.56 l
2381.03 4382.03 l
2380.55 4381.49 l
2380.07 4380.96 l
2379.59 4380.42 l
2379.12 4379.89 l
2378.64 4379.35 l
2378.16 4378.82 l
2377.68 4378.29 l
2377.21 4377.76 l
2376.73 4377.22 l
2376.25 4376.69 l
2375.78 4376.16 l
2375.3 4375.63 l
2374.83 4375.1 l
2374.36 4374.57 l
2373.88 4374.04 l
2373.41 4373.52 l
2372.94 4372.99 l
2372.46 4372.46 l
2371.99 4371.93 l
2371.52 4371.41 l
2371.05 4370.88 l
2370.58 4370.36 l
2370.11 4369.83 l
2369.64 4369.31 l
2369.17 4368.78 l
2368.7 4368.26 l
2368.24 4367.74 l
2367.77 4367.21 l
2367.3 4366.69 l
2366.83 4366.17 l
2366.37 4365.65 l
2365.9 4365.13 l
2365.44 4364.61 l
2364.97 4364.09 l
2364.51 4363.57 l
2364.04 4363.05 l
2363.58 4362.53 l
2363.11 4362.01 l
2362.65 4361.5 l
2362.19 4360.98 l
2361.73 4360.46 l
2361.27 4359.95 l
2360.8 4359.43 l
2360.34 4358.92 l
2359.88 4358.4 l
2359.42 4357.89 l
2358.96 4357.37 l
2358.51 4356.86 l
2358.05 4356.35 l
2357.59 4355.84 l
2357.13 4355.33 l
2356.67 4354.81 l
2356.22 4354.3 l
2355.76 4353.79 l
2355.3 4353.28 l
2354.85 4352.77 l
2354.39 4352.27 l
2353.94 4351.76 l
2353.49 4351.25 l
2353.03 4350.74 l
2352.58 4350.23 l
2352.13 4349.73 l
2351.67 4349.22 l
2351.22 4348.72 l
2350.77 4348.21 l
2350.32 4347.71 l
2349.87 4347.2 l
2349.42 4346.7 l
2348.97 4346.2 l
2348.52 4345.69 l
2348.07 4345.19 l
2347.62 4344.69 l
2347.17 4344.19 l
2346.72 4343.69 l
2346.28 4343.19 l
2345.83 4342.68 l
2345.38 4342.19 l
2344.94 4341.69 l
2344.49 4341.19 l
2344.05 4340.69 l
2343.6 4340.19 l
2343.16 4339.69 l
2342.71 4339.2 l
2342.27 4338.7 l
2341.83 4338.21 l
2341.38 4337.71 l
2340.94 4337.21 l
2340.5 4336.72 l
2340.06 4336.23 l
2339.62 4335.73 l
2339.18 4335.24 l
2338.74 4334.75 l
2338.3 4334.25 l
2337.86 4333.76 l
2337.42 4333.27 l
2336.98 4332.78 l
2336.54 4332.29 l
2336.1 4331.8 l
2335.67 4331.31 l
2335.23 4330.82 l
2334.79 4330.33 l
2334.36 4329.84 l
2333.92 4329.36 l
2333.49 4328.87 l
2333.05 4328.38 l
2332.62 4327.9 l
2332.18 4327.41 l
2331.75 4326.92 l
2331.32 4326.44 l
2330.89 4325.95 l
2330.45 4325.47 l
2330.02 4324.99 l
2329.59 4324.5 l
2329.16 4324.02 l
2328.73 4323.54 l
2328.3 4323.06 l
2327.87 4322.57 l
2327.44 4322.09 l
2327.01 4321.61 l
2326.58 4321.13 l
2326.15 4320.65 l
2325.73 4320.17 l
2325.3 4319.7 l
2324.87 4319.22 l
2324.45 4318.74 l
2324.02 4318.26 l
2323.59 4317.78 l
2323.17 4317.31 l
2322.74 4316.83 l
2322.32 4316.36 l
2321.89 4315.88 l
2321.47 4315.41 l
2321.05 4314.93 l
2320.63 4314.46 l
2320.2 4313.98 l
2319.78 4313.51 l
2319.36 4313.04 l
2318.94 4312.57 l
2318.52 4312.09 l
2318.1 4311.62 l
2317.68 4311.15 l
2317.26 4310.68 l
2316.84 4310.21 l
2316.42 4309.74 l
2316 4309.27 l
2315.58 4308.8 l
2315.16 4308.33 l
2314.75 4307.87 l
2314.33 4307.4 l
2313.91 4306.93 l
2313.5 4306.47 l
2313.08 4306 l
2312.67 4305.53 l
2312.25 4305.07 l
2311.84 4304.6 l
2311.42 4304.14 l
2311.01 4303.68 l
2310.6 4303.21 l
2310.18 4302.75 l
2309.77 4302.29 l
2309.36 4301.82 l
2308.95 4301.36 l
2308.54 4300.9 l
2308.13 4300.44 l
2307.72 4299.98 l
2307.31 4299.52 l
2306.9 4299.06 l
2306.49 4298.6 l
2306.08 4298.14 l
2305.67 4297.68 l
2305.26 4297.22 l
2304.85 4296.77 l
2304.45 4296.31 l
2304.04 4295.85 l
2303.63 4295.4 l
2303.23 4294.94 l
2302.82 4294.48 l
2302.41 4294.03 l
2302.01 4293.58 l
2301.61 4293.12 l
2301.2 4292.67 l
2300.8 4292.21 l
2300.39 4291.76 l
2299.99 4291.31 l
2299.59 4290.86 l
2299.19 4290.4 l
2298.78 4289.95 l
2298.38 4289.5 l
2297.98 4289.05 l
2297.58 4288.6 l
2297.18 4288.15 l
2296.78 4287.7 l
2296.38 4287.25 l
2295.98 4286.81 l
2295.58 4286.36 l
2295.18 4285.91 l
2294.79 4285.46 l
2294.39 4285.02 l
2293.99 4284.57 l
2293.59 4284.12 l
2293.2 4283.68 l
2292.8 4283.23 l
2292.41 4282.79 l
2292.01 4282.34 l
2291.61 4281.9 l
2291.22 4281.46 l
2290.83 4281.01 l
2290.43 4280.57 l
2290.04 4280.13 l
2289.64 4279.69 l
2289.25 4279.25 l
2288.86 4278.81 l
2288.47 4278.37 l
2288.08 4277.93 l
2287.68 4277.49 l
2287.29 4277.05 l
2286.9 4276.61 l
2286.51 4276.17 l
2286.12 4275.73 l
2285.73 4275.29 l
2285.34 4274.86 l
2284.96 4274.42 l
2284.57 4273.98 l
2284.18 4273.55 l
2283.79 4273.11 l
2283.41 4272.68 l
2283.02 4272.24 l
2282.63 4271.81 l
2282.25 4271.37 l
2281.86 4270.94 l
2281.47 4270.5 l
2281.09 4270.07 l
2280.7 4269.64 l
2280.32 4269.21 l
2279.94 4268.78 l
2279.55 4268.34 l
2279.17 4267.91 l
2278.79 4267.48 l
2278.4 4267.05 l
2278.02 4266.62 l
2277.64 4266.19 l
2277.26 4265.76 l
2276.88 4265.34 l
2276.5 4264.91 l
2276.12 4264.48 l
2275.74 4264.05 l
2275.36 4263.63 l
2274.98 4263.2 l
2274.6 4262.77 l
2274.22 4262.35 l
2273.84 4261.92 l
2273.47 4261.5 l
2273.09 4261.07 l
2272.71 4260.65 l
2272.34 4260.23 l
2271.96 4259.8 l
2271.58 4259.38 l
2271.21 4258.96 l
2270.83 4258.53 l
2270.46 4258.11 l
2270.08 4257.69 l
2269.71 4257.27 l
2269.34 4256.85 l
2268.96 4256.43 l
2268.59 4256.01 l
2268.22 4255.59 l
2267.84 4255.17 l
2267.47 4254.75 l
2267.1 4254.33 l
2266.73 4253.92 l
2266.36 4253.5 l
2265.99 4253.08 l
2265.62 4252.66 l
2265.25 4252.25 l
2264.88 4251.83 l
2264.51 4251.42 l
2264.14 4251 l
2263.77 4250.59 l
2263.4 4250.17 l
2263.04 4249.76 l
2262.67 4249.34 l
2262.3 4248.93 l
2261.94 4248.52 l
2261.57 4248.11 l
2261.2 4247.69 l
2260.84 4247.28 l
2260.47 4246.87 l
2260.11 4246.46 l
2259.74 4246.05 l
2259.38 4245.64 l
2259.01 4245.23 l
2258.65 4244.82 l
2258.29 4244.41 l
2257.92 4244 l
2257.56 4243.59 l
2257.2 4243.18 l
2256.84 4242.78 l
2256.48 4242.37 l
2256.12 4241.96 l
2255.75 4241.56 l
2255.39 4241.15 l
2255.03 4240.74 l
2254.67 4240.34 l
2254.32 4239.93 l
2253.96 4239.53 l
2253.6 4239.12 l
2253.24 4238.72 l
2252.88 4238.32 l
2252.52 4237.91 l
2252.17 4237.51 l
2251.81 4237.11 l
2251.45 4236.71 l
2251.1 4236.3 l
2250.74 4235.9 l
2250.38 4235.5 l
2250.03 4235.1 l
2249.67 4234.7 l
2249.32 4234.3 l
2248.96 4233.9 l
2248.61 4233.5 l
2248.26 4233.1 l
2247.9 4232.71 l
2247.55 4232.31 l
2247.2 4231.91 l
2246.85 4231.51 l
2246.49 4231.12 l
2246.14 4230.72 l
2245.79 4230.32 l
2245.44 4229.93 l
2245.09 4229.53 l
2244.74 4229.14 l
2244.39 4228.74 l
2244.04 4228.35 l
2243.69 4227.95 l
2243.34 4227.56 l
2242.99 4227.17 l
2242.64 4226.77 l
2242.3 4226.38 l
2241.95 4225.99 l
2241.6 4225.6 l
2241.25 4225.21 l
2240.91 4224.81 l
2240.56 4224.42 l
2240.21 4224.03 l
2239.87 4223.64 l
2239.52 4223.25 l
2239.18 4222.86 l
2238.83 4222.48 l
2238.49 4222.09 l
2238.15 4221.7 l
2237.8 4221.31 l
2237.46 4220.92 l
2237.11 4220.54 l
2236.77 4220.15 l
2236.43 4219.76 l
2236.09 4219.38 l
2235.75 4218.99 l
2235.4 4218.6 l
2235.06 4218.22 l
2234.72 4217.84 l
2234.38 4217.45 l
2234.04 4217.07 l
2233.7 4216.68 l
2233.36 4216.3 l
2233.02 4215.92 l
2232.68 4215.53 l
2232.35 4215.15 l
2232.01 4214.77 l
2231.67 4214.39 l
2231.33 4214.01 l
2230.99 4213.63 l
2230.66 4213.25 l
2230.32 4212.87 l
2229.98 4212.49 l
2229.65 4212.11 l
2229.31 4211.73 l
2228.98 4211.35 l
2228.64 4210.97 l
2228.31 4210.59 l
2227.97 4210.21 l
2227.64 4209.84 l
2227.3 4209.46 l
2226.97 4209.08 l
2226.64 4208.71 l
2226.3 4208.33 l
2225.97 4207.95 l
2225.64 4207.58 l
2225.31 4207.2 l
2224.98 4206.83 l
2224.64 4206.45 l
2224.31 4206.08 l
2223.98 4205.71 l
2223.65 4205.33 l
2223.32 4204.96 l
2222.99 4204.59 l
2222.66 4204.22 l
2222.33 4203.84 l
2222.01 4203.47 l
2221.68 4203.1 l
2221.35 4202.73 l
2221.02 4202.36 l
2220.69 4201.99 l
2220.37 4201.62 l
2220.04 4201.25 l
2219.71 4200.88 l
2219.39 4200.51 l
2219.06 4200.14 l
2218.73 4199.77 l
2218.41 4199.41 l
2218.08 4199.04 l
2217.76 4198.67 l
2217.43 4198.3 l
2217.11 4197.94 l
2216.78 4197.57 l
2216.46 4197.2 l
2216.14 4196.84 l
2215.81 4196.47 l
2215.49 4196.11 l
2215.17 4195.74 l
2214.85 4195.38 l
2214.53 4195.02 l
2214.2 4194.65 l
2213.88 4194.29 l
2213.56 4193.93 l
2213.24 4193.56 l
2212.92 4193.2 l
2212.6 4192.84 l
2212.28 4192.48 l
2211.96 4192.12 l
2211.64 4191.75 l
2211.32 4191.39 l
2211 4191.03 l
2210.69 4190.67 l
2210.37 4190.31 l
2210.05 4189.95 l
2209.73 4189.6 l
2209.42 4189.24 l
2209.1 4188.88 l
2208.78 4188.52 l
2208.47 4188.16 l
2208.15 4187.8 l
2207.84 4187.45 l
2207.52 4187.09 l
2207.2 4186.73 l
2206.89 4186.38 l
2206.58 4186.02 l
2206.26 4185.67 l
2205.95 4185.31 l
S
/DeviceGray {} cs
[0] sc
1215.1 2783.22 m
1215.1 2807.52 1195.4 2827.22 1171.1 2827.22 c
1146.8 2827.22 1127.1 2807.52 1127.1 2783.22 c
1127.1 2758.92 1146.8 2739.22 1171.1 2739.22 c
1195.4 2739.22 1215.1 2758.92 1215.1 2783.22 c
f
10 w
/DeviceGray {} CS
[0] SC
1215.1 2783.22 m
1215.1 2807.52 1195.4 2827.22 1171.1 2827.22 c
1146.8 2827.22 1127.1 2807.52 1127.1 2783.22 c
1127.1 2758.92 1146.8 2739.22 1171.1 2739.22 c
1195.4 2739.22 1215.1 2758.92 1215.1 2783.22 c
h
S
2814.71 1183.6 m
2814.71 1207.9 2795.01 1227.6 2770.71 1227.6 c
2746.41 1227.6 2726.71 1207.9 2726.71 1183.6 c
2726.71 1159.3 2746.41 1139.6 2770.71 1139.6 c
2795.01 1139.6 2814.71 1159.3 2814.71 1183.6 c
f
2814.71 1183.6 m
2814.71 1207.9 2795.01 1227.6 2770.71 1227.6 c
2746.41 1227.6 2726.71 1207.9 2726.71 1183.6 c
2726.71 1159.3 2746.41 1139.6 2770.71 1139.6 c
2795.01 1139.6 2814.71 1159.3 2814.71 1183.6 c
h
S
1317.47 3030.37 m
1317.47 3054.67 1297.77 3074.37 1273.47 3074.37 c
1249.17 3074.37 1229.47 3054.67 1229.47 3030.37 c
1229.47 3006.07 1249.17 2986.37 1273.47 2986.37 c
1297.77 2986.37 1317.47 3006.07 1317.47 3030.37 c
f
1317.47 3030.37 m
1317.47 3054.67 1297.77 3074.37 1273.47 3074.37 c
1249.17 3074.37 1229.47 3054.67 1229.47 3030.37 c
1229.47 3006.07 1249.17 2986.37 1273.47 2986.37 c
1297.77 2986.37 1317.47 3006.07 1317.47 3030.37 c
h
S
1129.02 2389.22 m
1129.02 2413.52 1109.32 2433.22 1085.02 2433.22 c
1060.71 2433.22 1041.02 2413.52 1041.02 2389.22 c
1041.02 2364.92 1060.71 2345.22 1085.02 2345.22 c
1109.32 2345.22 1129.02 2364.92 1129.02 2389.22 c
f
1129.02 2389.22 m
1129.02 2413.52 1109.32 2433.22 1085.02 2433.22 c
1060.71 2433.22 1041.02 2413.52 1041.02 2389.22 c
1041.02 2364.92 1060.71 2345.22 1085.02 2345.22 c
1109.32 2345.22 1129.02 2364.92 1129.02 2389.22 c
h
S
1561.1 3355.39 m
1561.1 3379.69 1541.4 3399.39 1517.1 3399.39 c
1492.8 3399.39 1473.1 3379.69 1473.1 3355.39 c
1473.1 3331.09 1492.8 3311.39 1517.1 3311.39 c
1541.4 3311.39 1561.1 3331.09 1561.1 3355.39 c
f
1561.1 3355.39 m
1561.1 3379.69 1541.4 3399.39 1517.1 3399.39 c
1492.8 3399.39 1473.1 3379.69 1473.1 3355.39 c
1473.1 3331.09 1492.8 3311.39 1517.1 3311.39 c
1541.4 3311.39 1561.1 3331.09 1561.1 3355.39 c
h
S
Q
q
Q
showpage
%%PageTrailer
pdfEndPage
end
%%Trailer
%%DocumentSuppliedResources:
%%EOF

%%EndDocument
 @endspecial 31516 70433 a Fc(\025)32609 70720 y Fb(\000)5689
34213 y Fc(\025)6782 34500 y Fa(+)p 0 TeXcolorgray 0
TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
